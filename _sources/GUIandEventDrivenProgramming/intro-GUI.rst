..  Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
    Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

.. qnum::
   :prefix: list-1-
   :start: 1

Graphical User Interfaces
=========================

A **graphical user interface** (GUI) allows a user
to interact with a computer program using a pointing device that manipulates
small pictures on a computer screen. The small pictures are called ``icons`` or
``widgets``. Various pointing devices have been used, such as a mouse, a joy stick,
and a human figure on a touch screen.

We refer to programs that use a **graphical user interface** as "GUI programs."
A GUI program is very different from a **command line interface** program
that gets user input from typed characters on a keyboard.
The tasks performed by a **command line interface** program
are determined completely by the programmer who wrote the program. When such a
program is executed it performs a series of tasks in a predetermined order and
then terminates. A GUI program's structure is very different. A GUI program
creates the icons and widgets that are displayed to a user and then it
simply waits for the user to manipulate them. The order that tasks are performed
by the program is under the user's control -- not the programs!
This means a GUI program must keep track of the "state" of its processing
and respond correctly to user commands that are given in any order the user
chooses. This style of programming is called "event driven programming."
In fact, GUI programming and event-driven programming are synonymous.

Event-driven Programming
========================

An event-driven program has the following structure:

* Create the icons and widgets that are displayed to a user and organize
  them inside a window.
* Define functions that will process application events.
* Associate each function with a related user event.
* Start an infinite event-loop that processes user events. When a user
  event happens, the event-loop calls the function associated with that
  event.

A GUI program's interface is composed of ``widgets`` displayed in a window.
Your computer's **operating system** controls the creation and manipulation
of windows on your computer's display screen. The operating system also
controls the pointing devices on your computer, such as a mouse or a touch
screen. Therefore, your computer's operating system has control of the events
that happen in a window. The operating system sends events to your program in
the order they are generated by a user. Your program's event-loop responds to
those events. All event-loops are basically the same, so there is a
generic event-loop that all programs use and it looks something like this:

.. code-block:: python

  while True:
    # Get the next event from the operating system
    event = get_next_event()

    # Get the function that is assigned to handle this event
    a_function_to_handle_the_event = event-handlers{event}

    # If a function has been assigned to handle this event, call the function
    if a_function_to_handle_the_event:
      a_function_to_handle_the_event()  # Call the event-handler function

    # Stop processing events if the user gives a command to stop the application
    if window_needs_to_close:
      break  # out of the event-loop

Again, you do not implement an event-loop in a GUI program. The event
loop already exists. To make this event-loop work in a generic fashion you
only need to associate a function (which is called an event-handler) to a
specific event. We will show you how to do that in a few lessons. First,
let's learn how to create a GUI interface.

GUI Programming Options
=======================

Python does not implement GUI, event-driven programming in its core
functionality. GUI programming is implemented using imported modules which
are often referred to as "toolkits." Anyone can implement external modules
that facilitate GUI programming and many people have. Therefore you have
many options available to you for GUI programming. A partial list of options
can be found at https://docs.python.org/3/faq/gui.html. The following lessons
explain how to use the Tkinter toolkit to create GUI programs. Once you
understand how GUI programming works, you should be able to learn
how to use any of the other available toolkits.

TKinter
=======

TKinter is an abbreviation for "TK interface". "TK" is a platform independent,
customizable, and configurable GUI library. The Python module ``TKinter`` allows
Python programs to use the TK libraries. An overview of TK can be found at
https://en.wikipedia.org/wiki/Tk_(software)

To create a GUI program you basically do five things:

* Create the widgets you want in your interface.
* Define the layout of the widgets (i.e., the location and size of each widget).
* Create functions that will perform your desired actions on user generated events.
* Connect the functions to specific user events.
* Start a GUI event-loop.

Each of these tasks are explain in the following lessons.

.. index:: graphical user interface, GUI, event-driven programming, event loop, event-handler, TKinter

