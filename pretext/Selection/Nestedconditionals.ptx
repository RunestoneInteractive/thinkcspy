<?xml version="1.0"?>
<section xml:id="selection_nested-conditionals">
  <title>Nested conditionals</title>
  <p>One conditional can also be <term>nested</term> within another. For example, assume we have two integer variables, <c>x</c> and <c>y</c>.
            The following pattern of selection shows how we might decide how they are related to each other.</p>
  <program language="python">
    <code>
if x &lt; y:
    print("x is less than y")
else:
    if x &gt; y:
        print("x is greater than y")
    else:
        print("x and y must be equal")
    </code>
  </program>
  <p>The outer conditional contains two branches.
            The second branch (the else from the outer) contains another <c>if</c> statement, which
            has two branches of its own. Those two branches could contain
            conditional statements as well.</p>
  <p>The flow of control for this example can be seen in this flowchart illustration.</p>
  <image source="Selection/Figures/flowchart_nested_conditional.png" width="50%"/>
  <p>Here is a complete program that defines values for <c>x</c> and <c>y</c>.  Run the program and see the result.  Then change the values of the variables to change the flow of control.</p>
  <program xml:id="sel2" interactive="activecode" language="python">
    <code>
x = 10
y = 10

if x &lt; y:
    print("x is less than y")
else:
    if x &gt; y:
        print("x is greater than y")
    else:
        print("x and y must be equal")
    </code>
  </program>
  <note>
    <p>In some programming languages, matching the if and the else is a problem.  However, in Python this is not the case.
                The indentation pattern tells us exactly which else
                belongs to which if.</p>
  </note>
  <p>If you are still a bit unsure, here is the same selection as part of a codelens example.  Step through it to see how the correct <c>print</c> is chosen.</p>
  <program xml:id="sel1" interactive="codelens" language="python">
    <code>
x = 10
y = 10

if x &lt; y:
    print("x is less than y")
else:
    if x > y:
        print("x is greater than y")
    else:
        print("x and y must be equal")
    </code>
  </program>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="test_question6_6_1">
    <statement>
      <p>Will the following code cause an error?</p>
      <program language="python">
        <code>
x = -10
if x &lt; 0:
    print("The negative number ",  x, " is not valid here.")
else:
    if x &gt; 0:
        print(x, " is a positive number")
    else:
        print(x," is 0")
        </code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>No</p>
        </statement>
        <feedback><p>
                    This is a legal nested if-else statement.  The inner if-else statement is contained completely within the body of the outer else-block.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>Yes</p>
        </statement>
        <feedback><p>
                    This is a legal nested if-else statement.  The inner if-else statement is contained completely within the body of the outer else-block.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
</section>
