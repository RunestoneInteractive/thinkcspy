<?xml version="1.0"?>
<section xml:id="simple-python-data_updating-variables">
  <title>Updating Variables</title>
  <video xml:id="updatevid" youtube="Px1c-3GP-5o" width="auto"/>
  <p>One of the most common forms of reassignment is an <term>update</term> where the new
            value of the variable depends on the old.  For example,</p>
  <program language="python">
    <code>
x = x + 1
</code>
  </program>
  <p>This means get the current value of x, add one, and then update x with the new
            value.  The new value of x is the old value of x plus 1.  Although this assignment statement may
            look a bit strange, remember that executing assignment is a two-step process.  First, evaluate the
            right-hand side expression.  Second, let the variable name on the left-hand side refer to this new
            resulting object.  The fact that <c>x</c> appears on both sides does not matter.  The semantics of the assignment
            statement makes sure that there is no confusion as to the result.  The visualizer makes this very clear.</p>
  <exercise runestone="se_updatevar1"/>
  <program xml:id="ch07_update1" interactive="activecode" language="python">
    <code>
x = 6        # initialize x
print(x)
x = x + 1    # update x
print(x)
        </code>
  </program>
  <p>If you try to update a variable that doesn't exist, you get an error because
            Python evaluates the expression on the right side of the assignment operator
            before it assigns the resulting value to the name on the left.
            Before you can update a variable, you have to <term>initialize</term> it, usually with a
            simple assignment.  In the above example, <c>x</c> was initialized to 6.</p>
  <p>Updating a variable by adding 1 is called an <term>increment</term>; subtracting 1 is
            called a <term>decrement</term>.  Sometimes programmers also talk about <term>bumping</term>
            a variable, which means the same as incrementing it by 1.</p>
  <note>
    <title>Advanced Topics</title>
    <p>
      <ul>
        <li>
          <p><url href="at_1_1.html" visual="at_1_1.html">Topic 1:</url> Python Beyond the Browser.  This is a gentle
                        introduction to using Python from the command line.  We'll cover this
                        later, but if you are curious about what Python looks like outside of this
                        eBook, you can have a look here.  There are also instructions for
                        installing Python on your computer here.</p>
        </li>
        <li>
          <p><url href="http://www.diveintopython3.net/" visual="http://www.diveintopython3.net/">Topic 2:</url> Dive Into Python 3,
                        this is an online textbook by Mark Pilgrim.  If you have already had some
                        programming experience, this book takes you off the deep end with
                        both feet.</p>
        </li>
      </ul>
    </p>
  </note>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="test_question2_10_1">
    <statement>
      <p>What is printed when the following statements execute?</p>
      <program language="python">
        <code>
x = 12
x = x - 1
print(x)
</code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>12</p>
        </statement>
        <feedback><p>
                    The value of x changes in the second statement.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>-1</p>
        </statement>
        <feedback><p>
                    In the second statement, substitute the current value of x before subtracting 1.
                </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>11</p>
        </statement>
        <feedback><p>
                    Yes, this statement sets the value of x equal to the current value minus 1.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>Nothing.  An error occurs because x can never be equal to x - 1.</p>
        </statement>
        <feedback><p>
                    Remember that variables in Python are different from variables in math in that they (temporarily) hold values, but can be reassigned.
                </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="test_question2_10_2">
    <statement>
      <p>What is printed when the following statements execute?</p>
      <program language="python">
        <code>
x = 12
x = x - 3
x = x + 5
x = x + 1
print(x)
</code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>12</p>
        </statement>
        <feedback><p>
                    The value of x changes in the second statement.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>9</p>
        </statement>
        <feedback><p>
                    Each statement changes the value of x, so 9 is not the final result.
                </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>15</p>
        </statement>
        <feedback><p>
                    Yes, starting with 12, subtract 3, than add 5, and finally add 1.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>Nothing.  An error occurs because x cannot be used that many times in assignment statements.</p>
        </statement>
        <feedback><p>
                    Remember that variables in Python are different from variables in math in that they (temporarily) hold values, but can be reassigned.
                </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question2_10_3" indent="show" language="python">
    <statement>
      <p>Construct the code that will result in the value 134 being printed.</p>
    </statement>
    <blocks>
      <block order="1">
        <cline>mybankbalance = 100</cline>
        <cline>mybankbalance = mybankbalance + 34</cline>
        <cline>print(mybankbalance)</cline>
      </block>
    </blocks>
  </exercise>
  <note>
    <p>This workspace is provided for your convenience.  You can use this activecode window to try out anything you like.</p>
    <program xml:id="scratch_02" interactive="activecode" language="python">
      <code>


        </code>
    </program>
  </note>
</section>
