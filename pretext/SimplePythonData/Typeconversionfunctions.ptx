<?xml version="1.0"?>
<section xml:id="simple-python-data_type-conversion-functions">
  <title>Type conversion functions</title>
  <p>Sometimes it is necessary to convert values from one type to another.  Python provides
            a few simple functions that will allow us to do that.  The functions <c>int</c>, <c>float</c> and <c>str</c>
            will (attempt to) convert their arguments into types int, float and str
            respectively.  We call these <term>type conversion</term> functions.</p>
  <p>The <c>int</c> function can take a floating point number or a string, and turn it
            into an int. For floating point numbers, it <em>discards</em> the decimal portion of
            the number - a process we call <em>truncation towards zero</em> on the number line.
            Let us see this in action:</p>
  <program xml:id="ch02_20" interactive="activecode" language="python">
    <input>
print(3.14, int(3.14))
print(3.9999, int(3.9999))       # This doesn't round to the closest int!
print(3.0, int(3.0))
print(-3.999, int(-3.999))        # Note that the result is closer to zero

print("2345", int("2345"))        # parse a string to produce an int
print(17, int(17))                # int even works on integers
print(int("23bottles"))
        </input>
  </program>
  <p>The last case shows that a string has to be a syntactically legal number,
            otherwise you'll get one of those pesky runtime errors.  Modify the example by deleting the
            <c>bottles</c> and rerun the program.  You should see the integer <c>23</c>.</p>
  <p>The type converter <c>float</c> can turn an integer, a float, or a syntactically
            legal string into a float.</p>
  <program xml:id="ch02_21" interactive="activecode" language="python">
    <input>
print(float("123.45"))
print(type(float("123.45")))
        </input>
  </program>
  <p>The type converter <c>str</c> turns its argument into a string.  Remember that when we print a string, the
            quotes are removed.  However, if we print the type, we can see that it is definitely str.</p>
  <program xml:id="ch02_22" interactive="activecode" language="python">
    <input>
print(str(17))
print(str(123.45))
print(type(str(123.45)))
        </input>
  </program>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="test_question2_2_1">
    <statement>
      <p>What value is printed when the following statement executes?</p>
      <program language="python">
        <input>
print( int(53.785) )
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Nothing is printed. It generates a runtime error.</p>
        </statement>
        <feedback><p>
                    The statement is valid Python code.  It calls the int function on 53.785 and then prints the value that is returned.
                </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>53</p>
        </statement>
        <feedback><p>
                    The int function truncates all values after the decimal and prints the integer value.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>54</p>
        </statement>
        <feedback><p>
                    When converting to an integer, the int function does not round.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>53.785</p>
        </statement>
        <feedback><p>
                    The int function removes the fractional part of 53.785 and returns an integer, which is then printed.
                </p></feedback>
      </choice>
    </choices>
  </exercise>
</section>
