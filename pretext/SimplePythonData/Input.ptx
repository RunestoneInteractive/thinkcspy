<?xml version="1.0"?>
<section xml:id="simple-python-data_input">
  <title>Input</title>
  <video xml:id="inputvid" youtube="2KYixkCBXSQ" width="auto"/>
  <p>The program in the previous section works fine but is very limited in that it only works with one value for <c>total_secs</c>.  What if we wanted to rewrite the program so that it was more general.  One thing we could
            do is allow the user to enter any value they wish for the number of seconds.  The program could then print the
            proper result for that starting value.</p>
  <p>In order to do this, we need a way to get <term>input</term> from the user.  Luckily, in Python
            there is a built-in function to accomplish this task.  As you might expect, it is called <c>input</c>.
  </p>
  <program language="python">
    <input>
n = input("Please enter your name: ")
    </input>
  </program>
  <p>The input function allows the user to provide a <term>prompt string</term>.  When the function is evaluated, the prompt is
            shown.
            The user of the program can enter the name and press return. When this
            happens the text that has been entered is returned from the input function,
            and in this case assigned to the variable n.  Make sure you run this example a number
            of times and try some different names in the input box that appears.</p>
  <program xml:id="inputfun" interactive="activecode" language="python">
    <input>
n = input("Please enter your name: ")
print("Hello", n)
    </input>
  </program>
  <p>It is very important to note that the <c>input</c> function returns a string value.  Even if you asked the user to enter their age, you would get back a string like
    <c>"17"</c>.  It would be your job, as the programmer, to convert that string into
            an int or a float, using the <c>int</c> or <c>float</c> converter functions we saw
            earlier.</p>
  <p>To modify our previous program, we will add an input statement to allow the user to enter the number of seconds.  Then
            we will convert that string to an integer.  From there the process is the same as before.  To complete the example, we will
            print some appropriate output.</p>
  <program xml:id="int_secs" interactive="activecode" language="python">
    <input>
str_seconds = input("Please enter the number of seconds you wish to convert")
total_secs = int(str_seconds)

hours = total_secs // 3600
secs_still_remaining = total_secs % 3600
minutes =  secs_still_remaining // 60
secs_finally_remaining = secs_still_remaining  % 60

print("Hrs=", hours, "mins=", minutes, "secs=", secs_finally_remaining)
    </input>
  </program>
  <p>The variable <c>str_seconds</c> will refer to the string that is entered by the user. As we said above, even though this string may be <c>7684</c>, it is still a string and not a number.  To convert it to an integer, we use the <c>int</c> function.
            The result is referred to by <c>total_secs</c>.  Now, each time you run the program, you can enter a new value for the number of seconds to be converted.</p>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="test_question2_7_1">
    <statement>
      <p>What is printed when the following statements execute?</p>
      <program language="python">
        <input>
n = input("Please enter your age: ")
# user types in 18
print ( type(n) )
        </input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>&lt;class 'str'&gt;</p>
        </statement>
        <feedback><p>
                    All input from users is read in as a string.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>&lt;class 'int'&gt;</p>
        </statement>
        <feedback><p>
                    Even though the user typed in an integer, it does not come into the program as an integer.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>&lt;class 18&gt;</p>
        </statement>
        <feedback><p>
                    18 is the value of what the user typed, not the type of the data.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>18</p>
        </statement>
        <feedback><p>
                    18 is the value of what the user typed, not the type of the data.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="test_question2_7_2">

    <statement>
      <p>Click on all of the variables of type `int` in the code below</p>
    </statement>
    <areas>
      <cline>
        <area correct="no">seconds</area> = input("Please enter the number of seconds you wish to convert")</cline>
      <p></p>
      <cline>
        <area>hours</area> = int(<area correct="no">seconds</area>) // 3600</cline>
      <cline>
        <area>total_secs</area> = int(<area correct="no">seconds</area>)
      </cline>
      <cline>
        <area>secs_still_remaining</area> =        <area>total_secs</area> % 3600</cline>
      <cline>print(<area>secs_still_remaining</area>)
      </cline>


    </areas>
  </exercise>
  <exercise label="test_question2_7_3">

    <statement>
      <p>Click on all of the variables of type `str` in the code below</p>
    </statement>
    <areas>
      <cline>
        <area>seconds</area> = input("Please enter the number of seconds you wish to convert")</cline>
      <p></p>
      <cline>
        <area correct ="no">hours</area> = int(<area>seconds</area>) // 3600</cline>
      <cline>
        <area correct="no">total_secs</area> = int(<area>seconds</area>)
      </cline>
      <cline>
        <area correct="no">secs_still_remaining</area> =        <area correct="no">total_secs</area> % 3600</cline>
      <cline>print(<area correct ="no">secs_still_remaining</area>)
      </cline>


    </areas>
  </exercise>
</section>
