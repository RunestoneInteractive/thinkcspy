<?xml version="1.0"?>
<section xml:id="unit-testing_test-first-development">
  <title>Test-First Development</title>
  <subsection><title>Introduction</title>
  <p>The idea of unit tests has been around a long time, and most people agree that writing unit tests is a good idea.
            However, when deadlines loom and time is at a premium, the unit tests often don't get written. That's a problem, because
            studies have shown that projects with good unit tests often are more robust, with fewer bugs, than projects that don't
            have good unit tests.</p>
  <p>In a traditional development process, when a programmer needs to create a new function, he writes the function, and
            then, if he has time, writes a unit test for it. If he doesn't have time, he doesn't write the unit test: he tests the
            function in the context of the program being developed. One day, someone decided that it might be a good idea
            to reverse the order: write the unit test <em>first</em>, and then write the function. That led to the idea of
            Test-First Development.</p>
  <note>
    <title>Test-First Development</title>
    <p>Test-First Development is an approach to writing software that involves writing a unit test for a function before
                writing the function.</p>
  </note>
  <p>In this section, we'll explore the idea of test-first development to see how it can help.</p>
  <p>A programmer using Test-First Development writes a new function using the following steps:</p>
  <p>
    <ol marker="1">
      <li>
        <p>First, create the function interface and docstring.</p>
      </li>
      <li>
        <p>Next, create a unit test for the function.</p>
      </li>
      <li>
        <p>Run the unit test. It should fail.</p>
      </li>
      <li>
        <p>Write the body of the function.</p>
      </li>
      <li>
        <p>Run the unit test. If it fails, debug the function, and run the test again. Repeat until the test passes.</p>
      </li>
    </ol>
  </p>
  <p>As an example, suppose that we're going to write our <c>sumnums</c> function using the Test-First methodology. We begin
            by creating the interface and docstring:</p>
  <pre>def sumnums(lo, hi):
    """computes the sum of a range of numbers

    Precondition: lo &lt;= hi
    Postcondition: returns the sum of the numbers in the range [lo..hi]
    """</pre>
  <p>Next, we write the unit test for it:</p>
  <program xml:id="ac_tfd_sumnums" interactive="activecode" language="python">
    <input>
def sumnums(lo, hi):
    """computes the sum of a range of numbers

    Precondition: lo &lt;= hi
    Postcondition: returns the sum of the numbers in the range [lo..hi]
    """

assert sumnums(1, 3) == 6
assert sumnums(1, 1) == 1
print("All tests passed!")
        </input>
  </program>
  <p>We run the unit test and it fails.</p>
  <p>Next, we implement the body of <c>sumnums</c>:</p>
  <program xml:id="ac_tfd_sumnums2" interactive="activecode" language="python">
    <input>
def sumnums(lo, hi):
    """computes the sum of a range of numbers

    Precondition: lo &lt;= hi
    Postcondition: returns the sum of the numbers in the range [lo..hi]
    """
    sum = 0
    for i in range(lo, hi):
        sum += i
    return sum

assert sumnums(1, 3) == 6
assert sumnums(1, 1) == 1
print("All tests passed!")
        </input>
  </program>
  <p>Now, run the tests. The tests indicate an assertion error, which points to a bug in the function logic. Fix the bug,
            and test again. (If you're not sure what the bug is, try using <term>Show in CodeLens</term> and stepping through the code to help
            you figure it out.)</p>
  <aside>
    <p>The range function generates numbers in the range <c>lo</c> .. <c>hi - 1</c>. Our function should include <c>hi</c>.
                Try adjusting the <c>hi</c> parameter for range to <c>hi + 1</c>.</p>
    </aside>
  <p>Suppose we're not creating a new function, but modifying an existing one. In Test-First Development,
            before making the modification to the function, we write a test for the new functionality. Then,
            we modify the function, and use the test to check that the modification worked.</p>
        </subsection>
  <subsection xml:id="unit-testing_benefits-of-test-first-development">
    <title>Benefits of Test-First Development</title>
    <p>There are several benefits to Test-First Development.</p>
    <p>
      <ol marker="1">
        <li>
          <p>It ensures that unit tests are written. This tends to lead to higher-quality, robust code, with fewer
                        bugs.</p>
        </li>
        <li>
          <p>Writing the tests first helps the programmer to clarify the function specification. It's not possible to
                        write an assert for a function that has a vague function docstring. This process forces the
                        programmer to write a clear docstring and to practice specification-based testing, because when the
                        tests are written, there is no function implementation to reference.</p>
        </li>
        <li>
          <p>When the programmer writes the function and is ready to test it, the test is all ready to go. There is no
                        internal struggle about whether a unit test should be written or not. The programmer runs the test,
                        and gets instant feedback about whether the function is working or not.</p>
        </li>
        <li>
          <p>If the function fails to pass the test, the benefits of unit testing in helping the programmer
                        to quickly diagnose and fix the problem are instantly available. The test-debug cycle is rapid.</p>
        </li>
        <li>
          <p>When a programmer modifies an existing function for which unit tests already exist, perhaps to add some more functionality,
                        the existing unit tests serve as a safety net. They check that the modifications made by the programmer don't break
                        any of the old functionality.</p>
        </li>
        <li>
          <p>The overall development time tends to be reduced.  Perhaps counter-intuitively, writing more code (the unit tests)
                        actually speeds up the overall development process, because of the benefits imparted by unit testing.</p>
        </li>
        <li>
          <p>Believe it or not, there are psychological benefits. As the programmer works on the project, creating
                        little tests and then writing code that passes those tests, there is a sense of accomplishment and satisfaction that
                        comes every time a new test passes. Instead of spending hours of frustration debugging a new function in the context
                        of a complex program, with few visible results, the test-first progress leads to more visible and regular successes.</p>
        </li>
      </ol>
    </p>
    <p>I hope you'll try out Test-First Development on your next assignment and experience some of these benefits
                for yourself!</p>
    <p>
      <term>Check your understanding</term>
    </p>
    <exercise label="mc_tfd_1">
      <statement>
        <p>Test-First Development often involves writing more code than traditional development.</p>
      </statement>
      <choices>
        <choice correct="yes">
          <statement>
            <p>True</p>
          </statement>
          <feedback><p>
                    Correct. Test-First Development requires the developer to write unit tests. However, these tests come with significant benefits and can speed up overall development.
                </p></feedback>
        </choice>
        <choice>
          <statement>
            <p>False</p>
          </statement>
          <feedback><p>
                    Incorrect. Test-First Development requires the developer to write unit tests. However, these tests come with significant benefits and can speed up overall development.
                </p></feedback>
        </choice>
      </choices>
    </exercise>
  </subsection>
</section>
