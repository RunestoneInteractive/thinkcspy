<?xml version="1.0"?>
<section xml:id="classes-digging-deeper_objects-are-mutable">
  <title>Objects are Mutable</title>
  <p>We can change the state of an object by making an assignment to one of its instance variables.
            For example, we could change the numerator of the fraction by assigning a new
            value to <c>self.num</c>.  Likewise, we could do the same thing for <c>self.den</c>.</p>
  <p>One place where this type of modification makes sense is when we place a fraction in <term>lowest terms</term>.  Lowest terms simply
            means that the numerator and denominator do not share any common factors.  For example, <c>12/16</c> is a fraction but it is
            not in lowest terms since 2 can divide into both 12 and 16.  We call 2 a <term>common divisor</term>.  If we divide the numerator
            and the denominator by a common divisor, we get an equivalent fraction.  If we divide by the <term>greatest common divisor</term>,
            we will get the lowest terms representation.  In this case 4 would be the greatest common divisor and the lowest terms
            representation would be 3/4.</p>
  <p>There is a very nice iterative method for computing the greatest common divisor of two integers.  Try to run the
            function on a number of different examples.</p>
  <program xml:id="fractions_gcd" interactive="activecode" language="python">
    <code>
def gcd(m, n):
    while m % n != 0:
        oldm = m
        oldn = n

        m = oldn
        n = oldm % oldn

    return n

print(gcd(12, 16))
        </code>
  </program>
  <p>Now that we have a function that can help us with finding the greatest common divisor, we can use that to implement
            a fraction method called <c>simplify</c>.  We will ask the fraction <q>to put itself in lowest terms</q>.</p>
  <p>The <c>simplify</c> method will pass the numerator and the denominator to the <c>gcd</c> function to find the
            greatest common divisor.  It will then modify itself by dividing its <c>num</c> and its <c>den</c> by that value.</p>
  <program xml:id="fractions_simplify" interactive="activecode" language="python">
    <code>
def gcd(m, n):
    while m % n != 0:
        oldm = m
        oldn = n

        m = oldn
        n = oldm % oldn

    return n

class Fraction:

    def __init__(self, top, bottom):

        self.num = top        # the numerator is on top
        self.den = bottom     # the denominator is on the bottom

    def __str__(self):
        return str(self.num) + "/" + str(self.den)

    def simplify(self):
        common = gcd(self.num, self.den)

        self.num = self.num // common
        self.den = self.den // common

myfraction = Fraction(12, 16)

print(myfraction)
myfraction.simplify()
print(myfraction)
        </code>
  </program>
  <p>There are two important things to note about this implementation.  First, the <c>gcd</c> function is not
            a method of the class.  It does not belong to <c>Fraction</c>.  Instead it is a function that is used by <c>Fraction</c>
            to assist in a task that needs to be performed.  This type of function is often called a <term>helper function</term>.  Second,
            the <c>simplify</c> method does not return anything.  Its job is to modify the object itself.  This type of method is
            known as a <term>mutator</term> method because it mutates or changes the internal state of the object.</p>
</section>
