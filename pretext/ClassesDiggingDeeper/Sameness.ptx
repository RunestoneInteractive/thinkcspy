<?xml version="1.0"?>
<section xml:id="classes-digging-deeper_sameness">
  <title>Sameness</title>
  <p>The meaning of the word <em>same</em> seems perfectly clear until you give it some
            thought and then you realize there is more to it than you expected.</p>
  <p>For example, if you say, Chris and I have the same car, you mean that his car
            and yours are the same make and model, but that they are two different cars. If
            you say, Chris and I have the same mother, you mean that his mother and yours
            are the same person.</p>
  <p>When you talk about objects, there is a similar ambiguity. For example, if two
            <c>Fraction</c>s are the same, does that mean they represent the same rational number
            or that they are actually the same object?</p>
  <p>We've already seen the <c>is</c> operator in the chapter on lists, where we
            talked about aliases.
            It allows us to find out if two references refer to the same object.</p>
  <program xml:id="fractions_is" interactive="activecode" language="python">
    <code>
class Fraction:

    def __init__(self, top, bottom):

        self.num = top        # the numerator is on top
        self.den = bottom     # the denominator is on the bottom

    def __str__(self):
        return str(self.num) + "/" + str(self.den)


myfraction = Fraction(3, 4)
yourfraction = Fraction(3, 4)
print(myfraction is yourfraction)

ourfraction = myfraction
print(myfraction is ourfraction)
        </code>
  </program>
  <p>Even though <c>myfraction</c> and <c>yourfraction</c> refer to the same rational number, they are not the same object.</p>
  <image source="ClassesDiggingDeeper/Figures/fractionpic2.png" width="50%"/>
  <p>If we assign <c>myfraction</c> to <c>ourfraction</c>, then the two variables are aliases
            of the same object.</p>
  <image source="ClassesDiggingDeeper/Figures/fractionpic3.png" width="50%"/>
  <p>This type of equality is called <term>shallow equality</term> because it compares only
            the references, not the contents of the objects.  Using the == operator to check equality between two user
            defined objects
            will return the shallow equality result.  In other words, the <c>Fraction</c> objects are equal (==) if they are the same object.</p>
  <p>Of course, we could define equality to mean the fractions are the same in that they represent the same
            rational number.  Recall from algebra that a/b = c/d is equivalent to a*d = b*c.
            Here is a boolean function that performs this check.</p>
  <program language="python">
    <code>
def sameRational(f1, f2):
    return f1.getNum()*f2.getDen() == f2.getNum() * f1.getDen()
</code>
  </program>
  <p>This type of equality is known as <term>deep equality</term> since it compares the values <q>deep</q> in the object, not just the reference to the object.</p>
  <program xml:id="fractions_eq1" interactive="activecode" language="python">
    <code>
def sameRational(f1, f2):
    return f1.getNum()*f2.getDen() == f2.getNum() * f1.getDen()

class Fraction:

    def __init__(self, top, bottom):

        self.num = top        # the numerator is on top
        self.den = bottom     # the denominator is on the bottom

    def __str__(self):
        return str(self.num) + "/" + str(self.den)

    def getNum(self):
        return self.num

    def getDen(self):
        return self.den


myfraction = Fraction(3, 4)
yourfraction = Fraction(3, 4)
print(myfraction is yourfraction)
print(sameRational(myfraction, yourfraction))
notInLowestTerms = Fraction(15, 20)
print(sameRational(myfraction, notInLowestTerms))
        </code>
  </program>
  <p>Of course, if the two variables refer to the same object, they have both
            shallow and deep equality.</p>
  <note>
    <title>Beware of  ==</title>
    <p><q>When I use a word,</q> Humpty Dumpty said, in a rather scornful tone, <q>it means just what I choose it to mean &#x2014; neither more nor less.</q>   <em>Alice in Wonderland</em></p>
    <p>Python has a powerful feature that allows a designer of a class to decide what an operation
                like <c>==</c> or <c>&lt;</c> should mean.  (We've just shown how we can control how our own objects
                are converted to strings, so we've already made a start!)  We'll cover more detail later.
                But sometimes the implementors will attach shallow equality semantics, and
                sometimes deep equality, as shown in this little experiment:</p>
    <program language="python">
      <code>
p = Point(4, 2)
s = Point(4, 2)
print("== on Points returns", p == s)  # by default, == does a shallow equality test here

a = [2, 3]
b = [2, 3]
print("== on lists returns",  a == b)  # by default, == does a deep equality test on lists
</code>
    </program>
    <p>This outputs:</p>
    <pre>== on Points returns False
== on lists returns True</pre>
    <p>So we conclude that even though the two lists (or tuples, etc.) are distinct objects
                with different memory addresses, in one case the <c>==</c> operator tests for deep equality,
                while in the case of points it makes a shallow test.</p>
  </note>
</section>
