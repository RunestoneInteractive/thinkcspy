<?xml version="1.0"?>
<section xml:id="appendices_debugging">
  <title>Debugging</title>
  <p>Different kinds of errors can occur in a program, and it is useful to
            distinguish among them in order to track them down more quickly:</p>
  <p>
    <ol label="1">
      <li>
        <p>Syntax errors are produced by Python when it is translating the source code
                    into byte code. They usually indicate that there is something wrong with the
                    syntax of the program. Example: Omitting the colon at the end of a <c>def</c>
                    statement yields the somewhat redundant message <c>SyntaxError: invalid
syntax</c>.</p>
      </li>
      <li>
        <p>Runtime errors are produced by the runtime system if something goes wrong
                    while the program is running. Most runtime error messages include
                    information about where the error occurred and what functions were
                    executing. Example: An infinite recursion eventually causes a runtime error
                    of maximum recursion depth exceeded.</p>
      </li>
      <li>
        <p>Semantic errors are problems with a program that compiles and runs but
                    doesn't do the right thing. Example: An expression may not be evaluated in
                    the order you expect, yielding an unexpected result.</p>
      </li>
    </ol>
  </p>
  <p>The first step in debugging is to figure out which kind of error you are
            dealing with. Although the following sections are organized by error type, some
            techniques are applicable in more than one situation.</p>
  <subsection xml:id="appendices_syntax-errors">
    <title>Syntax errors</title>
    <p>Syntax errors are usually easy to fix once you figure out what they are.
                Unfortunately, the error messages are often not helpful. The most common
                messages are <c>SyntaxError: invalid syntax</c> and <c>SyntaxError: invalid
token</c>, neither of which is very informative.</p>
    <p>On the other hand, the message does tell you where in the program the problem
                occurred. Actually, it tells you where Python noticed a problem, which is not
                necessarily where the error is. Sometimes the error is prior to the location of
                the error message, often on the preceding line.</p>
    <p>If you are building the program incrementally, you should have a good idea
                about where the error is. It will be in the last line you added.</p>
    <p>If you are copying code from a book, start by comparing your code to the book's
                code very carefully. Check every character. At the same time, remember that the
                book might be wrong, so if you see something that looks like a syntax error, it
                might be.</p>
    <p>Here are some ways to avoid the most common syntax errors:</p>
    <p>
      <ol label="1">
        <li>
          <p>Make sure you are not using a Python keyword for a variable name.</p>
        </li>
        <li>
          <p>Check that you have a colon at the end of the header of every compound
                        statement, including <c>for</c>, <c>while</c>, <c>if</c>, and <c>def</c> statements.</p>
        </li>
        <li>
          <p>Check that indentation is consistent. You may indent with either spaces or
                        tabs but it's best not to mix them. Each level should be nested the same
                        amount.</p>
        </li>
        <li>
          <p>Make sure that any strings in the code have matching quotation marks.</p>
        </li>
        <li>
          <p>If you have multiline strings with triple quotes (single or double), make
                        sure you have terminated the string properly. An unterminated string may
                        cause an <c>invalid token</c> error at the end of your program, or it may treat
                        the following part of the program as a string until it comes to the next
                        string. In the second case, it might not produce an error message at all!</p>
        </li>
        <li>
          <p>An unclosed bracket &#x2013; (, {, or [ &#x2013; makes Python continue with the next
                        line as part of the current statement. Generally, an error occurs almost
                        immediately in the next line.</p>
        </li>
        <li>
          <p>Check for the classic <c>=</c> instead of <c>==</c> inside a conditional.</p>
        </li>
      </ol>
    </p>
    <p>If nothing works, move on to the next section&#x2026;</p>
  </subsection>
  <subsection xml:id="appendices_i-can-t-get-my-program-to-run-no-matter-what-i-do">
    <title>I can't get my program to run no matter what I do.</title>
    <p>If the compiler says there is an error and you don't see it, that might be
                because you and the compiler are not looking at the same code. Check your
                programming environment to make sure that the program you are editing is the
                one Python is trying to run. If you are not sure, try putting an obvious and
                deliberate syntax error at the beginning of the program. Now run (or import) it
                again. If the compiler doesn't find the new error, there is probably something
                wrong with the way your environment is set up.</p>
    <p>If this happens, one approach is to start again with a new program like Hello,
                World!, and make sure you can get a known program to run.  Then gradually add
                the pieces of the new program to the working one.</p>
  </subsection>
  <subsection xml:id="appendices_runtime-errors">
    <title>Runtime errors</title>
    <p>Once your program is syntactically correct, Python can import it and at least
                start running it. What could possibly go wrong?</p>
  </subsection>
  <subsection xml:id="appendices_my-program-does-absolutely-nothing">
    <title>My program does absolutely nothing.</title>
    <p>This problem is most common when your file consists of functions and classes
                but does not actually invoke anything to start execution. This may be
                intentional if you only plan to import this module to supply classes and
                functions.</p>
    <p>If it is not intentional, make sure that you are invoking a function to start
                execution, or execute one from the interactive prompt. Also see the Flow of
                Execution section below.</p>
  </subsection>
  <subsection xml:id="appendices_my-program-hangs">
    <title>My program hangs.</title>
    <p>If a program stops and seems to be doing nothing, we say it is hanging. Often
                that means that it is caught in an infinite loop or an infinite recursion.</p>
    <p>
      <ol label="1">
        <li>
          <p>If there is a particular loop that you suspect is the problem, add a
                        <c>print</c> statement immediately before the loop that says entering the loop
                        and another immediately after that says exiting the loop.</p>
        </li>
        <li>
          <p>Run the program. If you get the first message and not the second, you've got
                        an infinite loop. Go to the Infinite Loop section below.</p>
        </li>
        <li>
          <p>Most of the time, an infinite recursion will cause the program to run for a
                        while and then produce a RuntimeError: Maximum recursion depth exceeded
                        error. If that happens, go to the Infinite Recursion
                        section below.</p>
        </li>
        <li>
          <p>If you are not getting this error but you suspect there is a problem with a
                        recursive method or function, you can still use the techniques in the
                        Infinite Recursion section.</p>
        </li>
        <li>
          <p>If neither of those steps works, start testing other loops and other
                        recursive functions and methods.</p>
        </li>
        <li>
          <p>If that doesn't work, then it is possible that you don't understand the flow
                        of execution in your program. Go to the Flow of Execution section below.</p>
        </li>
      </ol>
    </p>
  </subsection>
  <subsection xml:id="appendices_infinite-loop">
    <title>Infinite Loop</title>
    <p>If you think you have an infinite loop and you think you know what loop is
                causing the problem, add a <c>print</c> statement at the end of the loop that
                prints the values of the variables in the condition and the value of the
                condition.</p>
    <p>For example:</p>
    <program language="python">
      <code>
while x &gt; 0 and y &lt; 0:
    # do something to x
    # do something to y

    print("x: ", x)
    print("y: ", y)
    print("condition: ", (x &gt; 0 and y &lt; 0))
</code>
    </program>
    <p>Now when you run the program, you will see three lines of output for each time
                through the loop. The last time through the loop, the condition should be
                <c>false</c>. If the loop keeps going, you will be able to see the values of <c>x</c>
                and <c>y</c>, and you might figure out why they are not being updated correctly.</p>
    <p>In a development environment like PyScripter, one can also set a breakpoint
                at the start of the loop, and single-step through the loop.  While you do
                this, inspect the values of <c>x</c> and <c>y</c> by hovering your cursor over
                them.</p>
    <p>Of course, all programming and debugging require that you have a good mental
                model of what the algorithm ought to be doing: if you don't understand what
                ought to happen to <c>x</c> and <c>y</c>, printing or inspecting its value is
                of little use. Probably the best place to debug the code is away from
                your computer, working on your understanding of what should be happening.</p>
  </subsection>
  <subsection xml:id="appendices_infinite-recursion">
    <title>Infinite Recursion</title>
    <p>Most of the time, an infinite recursion will cause the program to run for a
                while and then produce a <c>Maximum recursion depth exceeded</c> error.</p>
    <p>If you suspect that a function or method is causing an infinite recursion,
                start by checking to make sure that there is a base case.  In other words,
                there should be some condition that will cause the function or method to return
                without making a recursive invocation. If not, then you need to rethink the
                algorithm and identify a base case.</p>
    <p>If there is a base case but the program doesn't seem to be reaching it, add a
                <c>print</c> statement at the beginning of the function or method that prints the
                parameters. Now when you run the program, you will see a few lines of output
                every time the function or method is invoked, and you will see the parameters.
                If the parameters are not moving toward the base case, you will get some ideas
                about why not.</p>
    <p>Once again, if you have an environment that supports easy single-stepping,
                breakpoints, and inspection, learn to use them well. It is our opinion that
                walking through code step-by-step builds the best and most accurate mental
                model of how computation happens. Use it if you have it!</p>
  </subsection>
  <subsection xml:id="appendices_flow-of-execution">
    <title>Flow of Execution</title>
    <p>If you are not sure how the flow of execution is moving through your program,
                add <c>print</c> statements to the beginning of each function with a message like
                entering function <c>foo</c>, where <c>foo</c> is the name of the function.</p>
    <p>Now when you run the program, it will print a trace of each function as it is
                invoked.</p>
    <p>If you're not sure, step through the program with your debugger.</p>
  </subsection>
  <subsection xml:id="appendices_when-i-run-the-program-i-get-an-exception">
    <title>When I run the program I get an exception.</title>
    <p>If something goes wrong during runtime, Python prints a message that includes
                the name of the exception, the line of the program where the problem occurred,
                and a traceback.</p>
    <p>Put a breakpoint on the line causing the exception, and look around!</p>
    <p>The traceback identifies the function that is currently running, and then the
                function that invoked it, and then the function that invoked <em>that</em>, and so on.
                In other words, it traces the path of function invocations that got you to
                where you are. It also includes the line number in your file where each of
                these calls occurs.</p>
    <p>The first step is to examine the place in the program where the error occurred
                and see if you can figure out what happened. These are some of the most common
                runtime errors:</p>
    <dl>
      <li>
        <title>NameError</title>
        <p>You are trying to use a variable that doesn't exist in the current
                            environment. Remember that local variables are local. You cannot refer to
                            them from outside the function where they are defined.</p>
      </li>
      <li>
        <title>TypeError</title>
        <p>There are several possible causes:</p>
        <p>
          <ol label="1">
            <li>
              <p>You are trying to use a value improperly. Example: indexing a
                                    string, list, or tuple with something other than an integer.</p>
            </li>
            <li>
              <p>There is a mismatch between the items in a format string and the
                                    items passed for conversion. This can happen if either the number of
                                    items does not match or an invalid conversion is called for.</p>
            </li>
            <li>
              <p>You are passing the wrong number of arguments to a function or
                                    method. For methods, look at the method definition and check that the
                                    first parameter is <c>self</c>. Then look at the method invocation; make
                                    sure you are invoking the method on an object with the right type and
                                    providing the other arguments correctly.</p>
            </li>
          </ol>
        </p>
      </li>
      <li>
        <title>KeyError</title>
        <p>You are trying to access an element of a dictionary using a key value that
                            the dictionary does not contain.</p>
      </li>
      <li>
        <title>AttributeError</title>
        <p>You are trying to access an attribute or method that does not exist.</p>
      </li>
      <li>
        <title>IndexError</title>
        <p>The index you are using to access a list, string, or tuple is greater than
                            its length minus one. Immediately before the site of the error, add a
                            <c>print</c> statement to display the value of the index and the length of the
                            array. Is the array the right size? Is the index the right value?</p>
      </li>
    </dl>
  </subsection>
  <subsection xml:id="appendices_i-added-so-many-print-statements-i-get-inundated-with-output">
    <title>I added so many <c>print</c> statements I get inundated with output.</title>
    <p>One of the problems with using <c>print</c> statements for debugging is
                that you can end up buried in output. There are two ways to proceed:
                simplify the output or simplify the program.</p>
    <p>To simplify the output, you can remove or comment out <c>print</c>
                statements that aren't helping, or combine them, or format the output
                so it is easier to understand.</p>
    <p>To simplify the program, there are several things you can do. First,
                scale down the problem the program is working on. For example, if you
                are sorting an array, sort a <em>small</em> array. If the program takes input
                from the user, give it the simplest input that causes the problem.</p>
    <p>Second, clean up the program. Remove dead code and reorganize the
                program to make it as easy to read as possible. For example, if you
                suspect that the problem is in a deeply nested part of the program,
                try rewriting that part with simpler structure. If you suspect a large
                function, try splitting it into smaller functions and testing them
                separately.</p>
    <p>Often the process of finding the minimal test case leads you to the
                bug. If you find that a program works in one situation but not in
                another, that gives you a clue about what is going on.</p>
    <p>Similarly, rewriting a piece of code can help you find subtle bugs. If
                you make a change that you think doesn't affect the program, and it
                does, that can tip you off.</p>
    <p>You can also wrap your debugging print statements in some
                condition, so that you suppress much of the output. For example, if
                you are trying to find an element using a binary search, and it is
                not working, you might code up a debugging print statement inside
                a conditional:  if the range of candidate elements is less that 6,
                then print debugging information, otherwise don't print.</p>
    <p>Similarly, breakpoints can be made conditional: you can set a breakpoint
                on a statement, then edit the breakpoint to say <q>only break if this
                expression becomes true</q>.</p>
  </subsection>
  <subsection xml:id="appendices_semantic-errors">
    <title>Semantic errors</title>
    <p>In some ways, semantic errors are the hardest to debug, because the
                compiler and the runtime system provide no information about what is
                wrong. Only you know what the program is supposed to do, and only you
                know that it isn't doing it.</p>
    <p>The first step is to make a connection between the program text and
                the behavior you are seeing. You need a hypothesis about what the
                program is actually doing. One of the things that makes that hard is
                that computers run so fast.</p>
    <p>You will often wish that you could slow the program down to human
                speed, and with some debuggers you can. But the time it takes to
                insert a few well-placed <c>print</c> statements is often short compared to
                setting up the debugger, inserting and removing breakpoints, and
                walking the program to where the error is occurring.</p>
  </subsection>
  <subsection xml:id="appendices_my-program-doesn-t-work">
    <title>My program doesn't work.</title>
    <p>You should ask yourself these questions:</p>
    <p>
      <ol label="1">
        <li>
          <p>Is there something the program was supposed to do but which doesn't
                        seem to be happening? Find the section of the code that performs that
                        function and make sure it is executing when you think it should.</p>
        </li>
        <li>
          <p>Is something happening that shouldn't? Find code in your program
                        that performs that function and see if it is executing when it
                        shouldn't.</p>
        </li>
        <li>
          <p>Is a section of code producing an effect that is not what you
                        expected? Make sure that you understand the code in question,
                        especially if it involves invocations to functions or methods in other
                        Python modules. Read the documentation for the functions you invoke.
                        Try them out by writing simple test cases and checking the results.</p>
        </li>
      </ol>
    </p>
    <p>In order to program, you need to have a mental model of how programs
                work. If you write a program that doesn't do what you expect, very
                often the problem is not in the program; it's in your mental model.</p>
    <p>The best way to correct your mental model is to break the program into
                its components (usually the functions and methods) and test each
                component independently. Once you find the discrepancy between your
                model and reality, you can solve the problem.</p>
    <p>Of course, you should be building and testing components as you
                develop the program. If you encounter a problem, there should be only
                a small amount of new code that is not known to be correct.</p>
  </subsection>
  <subsection xml:id="appendices_i-ve-got-a-big-hairy-expression-and-it-doesn-t-do-what-i-expect">
    <title>I've got a big hairy expression and it doesn't do what I expect.</title>
    <p>Writing complex expressions is fine as long as they are readable, but
                they can be hard to debug. It is often a good idea to break a complex
                expression into a series of assignments to temporary variables.</p>
    <p>For example:</p>
    <program language="python">
      <code>
self.hands[i].addCard (self.hands[self.findNeighbor(i)].popCard())
</code>
    </program>
    <p>This can be rewritten as:</p>
    <program language="python">
      <code>
neighbor = self.findNeighbor (i)
pickedCard = self.hands[neighbor].popCard()
self.hands[i].addCard (pickedCard)
</code>
    </program>
    <p>The explicit version is easier to read because the variable names provide
                additional documentation, and it is easier to debug because you can check the
                types of the intermediate variables and display or inspect their values.</p>
    <p>Another problem that can occur with big expressions is that the order of
                evaluation may not be what you expect. For example, if you are translating the
                expression <c>x/2pi</c> into Python, you might write:</p>
    <program language="python">
      <code>
y = x / 2 * math.pi;
</code>
    </program>
    <p>That is not correct because multiplication and division have the same
                precedence and are evaluated from left to right. So this expression computes
                <c>(x/2)pi</c>.</p>
    <p>A good way to debug expressions is to add parentheses to make the order of
                evaluation explicit:</p>
    <program language="python">
      <code>
y = x / (2 * math.pi);
</code>
    </program>
    <p>Whenever you are not sure of the order of evaluation, use parentheses.  Not
                only will the program be correct (in the sense of doing what you intended), it
                will also be more readable for other people who haven't memorized the rules of
                precedence.</p>
  </subsection>
  <subsection xml:id="appendices_i-ve-got-a-function-or-method-that-doesn-t-return-what-i-expect">
    <title>I've got a function or method that doesn't return what I expect.</title>
    <p>If you have a <c>return</c> statement with a complex expression, you don't have a
                chance to print the <c>return</c> value before returning. Again, you can use a
                temporary variable. For example, instead of:</p>
    <program language="python">
      <code>
return self.hands[i].removeMatches()
</code>
    </program>
    <p>you could write:</p>
    <program language="python">
      <code>
count = self.hands[i].removeMatches()
return count
</code>
    </program>
    <p>Now you have the opportunity to display or inspect the value of <c>count</c> before
                returning.</p>
  </subsection>
  <subsection xml:id="appendices_i-m-really-really-stuck-and-i-need-help">
    <title>I'm really, really stuck and I need help.</title>
    <p>First, try getting away from the computer for a few minutes. Computers emit
                waves that affect the brain, causing these effects:</p>
    <p>
      <ol label="1">
        <li>
          <p>Frustration and/or rage.</p>
        </li>
        <li>
          <p>Superstitious beliefs ( the computer hates me ) and magical thinking ( the
                        program only works when I wear my hat backward ).</p>
        </li>
        <li>
          <p>Random-walk programming (the attempt to program by writing every possible
                        program and choosing the one that does the right thing).</p>
        </li>
      </ol>
    </p>
    <p>If you find yourself suffering from any of these symptoms, get up and go for a
                walk. When you are calm, think about the program. What is it doing? What are
                some possible causes of that behavior? When was the last time you had a working
                program, and what did you do next?</p>
    <p>Sometimes it just takes time to find a bug. We often find bugs when we are away
                from the computer and let our minds wander. Some of the best places to find
                bugs are trains, showers, and in bed, just before you fall asleep.</p>
  </subsection>
  <subsection xml:id="appendices_no-i-really-need-help">
    <title>No, I really need help.</title>
    <p>It happens. Even the best programmers occasionally get stuck.  Sometimes you
                work on a program so long that you can't see the error.  A fresh pair of eyes
                is just the thing.</p>
    <p>Before you bring someone else in, make sure you have exhausted the techniques
                described here. Your program should be as simple as possible, and you should be
                working on the smallest input that causes the error. You should have <c>print</c>
                statements in the appropriate places (and the output they produce should be
                comprehensible). You should understand the problem well enough to describe it
                concisely.</p>
    <p>When you bring someone in to help, be sure to give them the information they
                need:</p>
    <p>
      <ol label="1">
        <li>
          <p>If there is an error message, what is it and what part of the program does
                        it indicate?</p>
        </li>
        <li>
          <p>What was the last thing you did before this error occurred? What were the
                        last lines of code that you wrote, or what is the new test case that fails?</p>
        </li>
        <li>
          <p>What have you tried so far, and what have you learned?</p>
        </li>
      </ol>
    </p>
    <p>Good instructors and helpers will also do something that should not
                offend you: they won't believe when you tell them <em><q>I'm sure all the input
                    routines are working just fine, and that I've set up the data correctly!</q></em>.
                They will want to validate and check things for themselves.
                After all, your program has a bug.
                Your understanding and inspection of the code have not found it yet. So you
                should expect to have your assumptions challenged.  And as you gain skills
                and help others, you'll need to do the same for them.</p>
    <p>When you find the bug, take a second to think about what you could have done to
                find it faster. Next time you see something similar, you will be able to find
                the bug more quickly.</p>
    <p>Remember, the goal is not just to make the program work. The goal is to learn
                how to make the program work.</p>
  </subsection>
</section>
