<?xml version="1.0"?>
<section xml:id="dictionaries_sparse-matrices">
  <title>Sparse Matrices</title>
  <p>A matrix is a two dimensional collection, typically thought of as having rows and columns of data.  One of the easiest ways to create a matrix is to use a list of lists.  For example, consider the matrix shown below.</p>
  <image source="Dictionaries/Figures/sparse.png" width="50%" alt="sparse matrix"/>
  <p>We can represent this collection as five rows, each row having five columns.  Using a list of lists representation, we will have a list of five items, each of which is a list of five items.  The
            outer items represent the rows and the items in the nested lists represent the data in each column.</p>
  <program language="python">
    <input>
matrix = [[0, 0, 0, 1, 0],
          [0, 0, 0, 0, 0],
          [0, 2, 0, 0, 0],
          [0, 0, 0, 0, 0],
          [0, 0, 0, 3, 0]]
</input>
  </program>
  <p>One thing that you might note about this example matrix is that there are many items that are zero.  In fact, only three of the
            data values are nonzero.  This type of matrix has a special name.  It is called a <url href="http://en.wikipedia.org/wiki/Sparse_matrix" visual="http://en.wikipedia.org/wiki/Sparse_matrix">sparse matrix</url>.</p>
  <p>Since there is really no need to store all of the zeros, the list of lists representation is considered to be inefficient.
            An alternative representation is to use a dictionary. For the keys, we can use tuples that
            contain the row and column numbers. Here is the dictionary representation of
            the same matrix.</p>
  <program language="python">
    <input>
matrix = {(0, 3): 1, (2, 1): 2, (4, 3): 3}
</input>
  </program>
  <p>We only need three key-value pairs, one for each nonzero element of the matrix.
            Each key is a tuple, and each value is an integer.</p>
  <p>To access an element of the matrix, we could use the <c>[]</c> operator:</p>
  <pre>matrix[(0, 3)]</pre>
  <p>Notice that the syntax for the dictionary representation is not the same as the
            syntax for the nested list representation. Instead of two integer indices, we
            use one index, which is a tuple of integers.</p>
  <p>There is one problem. If we specify an element that is zero, we get an error,
            because there is no entry in the dictionary with that key.
            The alternative version of the <c>get</c> method solves this problem.
            The first argument will be the key.  The second argument is the value <c>get</c> should
            return if the key is not in the dictionary (which would be 0 since it is sparse).</p>
  <program xml:id="chp12_sparse" interactive="activecode" language="python">
    <input>
matrix = {(0, 3): 1, (2, 1): 2, (4, 3): 3}
print(matrix.get((0,3)))

print(matrix.get((1, 3), 0))
        </input>
  </program>
  <note>
    <title>Lab</title>
    <p>
      <ul>
        <li>
          <p>Counting Letters <xref ref="labs_counting-letters" /> In this guided lab exercise we will work
                        through a problem solving exercise that will use dictionaries to generalize the solution
                        to counting the occurrences of all letters in a string.</p>
        </li>
      </ul>
    </p>
  </note>
  <note>
    <title>Lab</title>
    <p>
      <ul>
        <li>
          <p>Letter Count Histogram <xref ref="labs_letter-count-histogram" /> Combine the previous lab with the histogram example.</p>
        </li>
      </ul>
    </p>
  </note>
</section>
