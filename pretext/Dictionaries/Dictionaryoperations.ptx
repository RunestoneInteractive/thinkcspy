<?xml version="1.0"?>
<section xml:id="dictionaries_dictionary-operations">
  <title>Dictionary Operations</title>
  <p>The <c>del</c> statement removes a key-value pair from a dictionary. For example,
            the following dictionary contains the names of various fruits and the number of
            each fruit in stock.  If someone buys all of the pears, we can remove the entry from the dictionary.</p>
  <program xml:id="ch12_dict4" interactive="codelens" language="python">
    <code>
          inventory = {'apples': 430, 'bananas': 312, 'oranges': 525, 'pears': 217}

          del inventory['pears']
    </code>
  </program>

  <p>Dictionaries are also mutable.  As we've seen before with lists, this means that the dictionary can
            be modified by referencing an association on the left hand side of the assignment statement.  In the previous
            example, instead of deleting the entry for <c>pears</c>, we could have set the inventory to <c>0</c>.
  </p>
  <program xml:id="ch12_dict4a" interactive="codelens" language="python">
    <code>
          inventory = {'apples': 430, 'bananas': 312, 'oranges': 525, 'pears': 217}

          inventory['pears'] = 0
    </code>
  </program>
  <p>Similarily,
            a new shipment of 200 bananas arriving could be handled like this.</p>
  <program xml:id="ch12_dict5" interactive="codelens" language="python">
    <code>
          inventory = {'apples': 430, 'bananas': 312, 'oranges': 525, 'pears': 217}
          inventory['bananas'] = inventory['bananas'] + 200


          numItems = len(inventory)
    </code>
  </program>
  <p>Notice that there are now 512 bananas&#x2014;the dictionary has been modified.  Note also that the <c>len</c> function also works on dictionaries.  It returns the number
            of key-value pairs:</p>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="test_question11_2_1">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <code>
mydict = {"cat":12, "dog":6, "elephant":23}
mydict["mouse"] = mydict["cat"] + mydict["dog"]
print(mydict["mouse"])
        </code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>12</p>
        </statement>
        <feedback><p>
                    12 is associated with the key cat.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>0</p>
        </statement>
        <feedback><p>
                    The key mouse will be associated with the sum of the two values.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>18</p>
        </statement>
        <feedback><p>
                    Yes, add the value for cat and the value for dog (12 + 6) and create a new entry for mouse.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>Error, there is no entry with mouse as the key.</p>
        </statement>
        <feedback><p>
                    Since the new key is introduced on the left hand side of the assignment statement, a new key-value pair is added to the dictionary.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
</section>
