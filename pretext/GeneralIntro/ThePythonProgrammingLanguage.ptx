<?xml version="1.0"?>
<section xml:id="general-intro_the-python-programming-language">
  <title>The Python Programming Language</title>
  <p>The programming language you will be learning is Python. Python is an example
            of a <term>high-level language</term>; other high-level languages you might have heard
            of are C++, PHP, and Java.</p>
  <p>As you might infer from the name high-level language, there are also
            <term>low-level languages</term>, sometimes referred to as machine languages or assembly
            languages. Machine language is the encoding of instructions in binary so that they can be directly executed by the computer.  Assembly language uses a slightly easier format to refer to the low level instructions.
            Loosely speaking, computers can only execute programs written in
            low-level languages.  To be exact, computers can actually only execute programs written in machine language. Thus, programs written in a high-level language (and even those in assembly language) have to be
            processed before they can run. This extra processing takes some time, which is
            a small disadvantage of high-level languages.
            However, the advantages to high-level languages are enormous.</p>
  <p>First, it is much easier to program in a
            high-level language. Programs written in a high-level language take less time
            to write, they are shorter and easier to read, and they are more likely to be
            correct. Second, high-level languages are <term>portable</term>, meaning that they can
            run on different kinds of computers with few or no modifications. Low-level
            programs can run on only one kind of computer and have to be rewritten to run
            on another.</p>
  <p>Due to these advantages, almost all programs are written in high-level
            languages. Low-level languages are used only for a few specialized
            applications.</p>
  <p>Two kinds of programs process high-level languages into low-level languages:
            <term>interpreters</term> and <term>compilers</term>. An interpreter reads a high-level program
            and executes it, meaning that it does what the program says. It processes the
            program a little at a time, alternately reading lines and performing
            computations.</p>
  <image source="GeneralIntro/Figures/interpret.png" width="50%" alt="Interpret illustration"/>
  <p>A compiler reads the program and translates it completely before the program
            starts running. In this case, the high-level program is called the <term>source
                code</term>, and the translated program is called the <term>object code</term> or the
            <term>executable</term>. Once a program is compiled, you can execute it repeatedly
            without further translation.</p>
  <image source="GeneralIntro/Figures/compile.png" width="50%" alt="Compile illustration"/>
  <p>Many modern languages use both processes. They are first compiled into a lower
            level language, called <term>byte code</term>, and then interpreted by a program called
            a <term>virtual machine</term>. Python uses both processes, but because of the way
            programmers interact with it, it is usually considered an interpreted language.</p>
  <p>There are two ways to use the Python interpreter: <em>shell mode</em> and <em>program
                mode</em>. In shell mode, you type Python expressions into the <term>Python shell</term>,
            and the interpreter immediately shows the result.  The example below shows the Python shell at work.</p>
  <pre>$ python3
Python 3.2 (r32:88445, Mar 25 2011, 19:28:28)
[GCC 4.5.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 2 + 3
5
&gt;&gt;&gt;</pre>
  <p>The <c>&gt;&gt;&gt;</c> is called the <term>Python prompt</term>. The interpreter uses the prompt to
            indicate that it is ready for instructions. We typed <c>2 + 3</c>.  The
            interpreter evaluated our expression and replied <c>5</c>. On the next line
            it gave a new prompt indicating that it is ready for more input.</p>
  <p>Working directly in the interpreter is convenient for testing short bits of
            code because you get immediate feedback. Think of it as scratch paper used to
            help you work out problems.</p>
  <p>Alternatively, you can write an entire program by placing lines of Python instructions
            in a file and then use the interpreter to
            execute the contents of the file as a whole. Such a file is often referred to as <term>source code</term>.  For
            example, we used a text editor to create a source code file named <c>firstprogram.py</c> with
            the following contents:</p>
  <program language="python">
    <code>
print("My first program adds two numbers, 2 and 3:")
print(2 + 3)
</code>
  </program>
  <p>By convention, files that contain Python programs have names that end with
            <c>.py</c> .  Following this convention will help your operating system and other
            programs identify a file as containing python code.</p>
  <pre>$ python firstprogram.py
My first program adds two numbers, 2 and 3:
5</pre>
  <p>These examples show Python being run from a Unix command line. In other
            development environments, the details of executing programs may differ. Also,
            most programs are more interesting than this one.</p>
  <note>
    <title>Want to learn more about Python?</title>
    <p>If you would like to learn more about installing and using Python, here are some video links.
                <url href="http://youtu.be/9EfGpN1Pnsg" visual="http://youtu.be/9EfGpN1Pnsg">Installing Python for Windows</url> shows you how to install the Python environment under
                Windows Vista,
                <url href="http://youtu.be/MEmEJCLLI2k" visual="http://youtu.be/MEmEJCLLI2k">Installing Python for Mac</url> shows you how to install under Mac OS/X, and
                <url href="http://youtu.be/RLPYBxfAud4" visual="http://youtu.be/RLPYBxfAud4">Installing Python for Linux</url> shows you how to install from the Linux
                command line.
                <url href="http://youtu.be/kXbpB5_ywDw" visual="http://youtu.be/kXbpB5_ywDw">Using Python</url> shows you some details about the Python shell and source code.</p>
  </note>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="question1_2_1">
    <statement>
      <p>Source code is another name for:</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>the instructions in a program, stored in a file.</p>
        </statement>
        <feedback><p>
                    The file that contains the instructions written in the high level language is called the source code file.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>the language that you are programming in (e.g., Python).</p>
        </statement>
        <feedback><p>
                    This language is simply called the programming language, or simply the language.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>the environment/tool in which you are programming.</p>
        </statement>
        <feedback><p>
                    The environment may be called the IDE, or integrated development environment, though not always.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>the number (or "code") that you must input at the top of each program to tell the computer how to execute your program.</p>
        </statement>
        <feedback><p>
                    There is no such number that you must type in at the start of your program.
                </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question1_2_2">
    <statement>
      <blockquote>
        <p>What is the difference between a high-level programming language and a low-level programming language?</p>
      </blockquote>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>It is high-level if you are standing and low-level if you are sitting.</p>
        </statement>
        <feedback><p>
                    In this case high and low have nothing to do with altitude.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>It is high-level if you are programming for a computer and low-level if you are programming for a phone or mobile device.</p>
        </statement>
        <feedback><p>
                    High and low have nothing to do with the type of device you are programming for.  Instead, look at what it takes to run the program written in the language.
                </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>It is high-level if the program must be processed before it can run, and low-level if the computer can execute it without additional processing.</p>
        </statement>
        <feedback><p>
                    Python is a high level language but must be interpreted into machine code (binary) before it can be executed.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>It is high-level if it easy to program in and is very short; it is low-level if it is really hard to program in and the programs are really long.</p>
        </statement>
        <feedback><p>
                    While it is true that it is generally easier to program in a high-level language and programs written in a high-level language are usually shorter, this is not always the case.
                </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question1_2_3">
    <statement>
      <p>Pick the best replacements for 1 and 2 in the following sentence: When comparing compilers and interpreters, a compiler is like 1 while an interpreter is like 2.</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>1 = a process, 2 = a function</p>
        </statement>
        <feedback><p>
                    Compiling is a software process, and running the interpreter is invoking a function, but how is a process different than a function?
                </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>1 = translating an entire book, 2 = translating a line at a time</p>
        </statement>
        <feedback><p>
                    Compilers take the entire source code and produce object code or the executable and interpreters execute the code line by line.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>1 = software, 2 = hardware</p>
        </statement>
        <feedback><p>
                    Both compilers and interpreters are software.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>1 = object code, 2 = byte code</p>
        </statement>
        <feedback><p>
                    Compilers can produce object code or byte code depending on the language.  An interpreter produces neither.
                </p></feedback>
      </choice>
    </choices>
  </exercise>
</section>
