<?xml version="1.0"?>
<section xml:id="web-apps_more-about-flask">
  <title>More About Flask</title>
  <p>When you executed the flaskhello.py program in the previous section and used a web
            browser to access it with the url <url href="http://localhost:5000/" visual="http://localhost:5000/">http://localhost:5000/</url>, in addition to seeing a
            <q>Hello, world!</q> message in the browser, you should also have observed a log message like
            the following in the console:</p>
  <pre>127.0.0.1 - - [21/Apr/2016 08:02:28] "GET / HTTP/1.1" 200 -</pre>
  <p>Every time the Flask server receives a request from a browser, it writes a log message to the
            console. The message contains information such as the <term>IP address</term> of the computer that sent the request
            (127.0.0.1 is a special address indicating the request came from the browser on the same
            computer that the Flask server is running on);
            the date and time of the request; the path of the incoming request (<q>/</q> in this case); and the status
            of the result (here, 200 indicates the request was successfully processed).</p>
  <p>The Flask server continues running until you press Ctrl-C to stop it. At that point, if you
            try to send a request to the application from the browser, the browser will display an
            error message indicating that it cannot contact the server. Go ahead and try this, so you can
            recognize what the error message looks like in your particular browser.</p>
  <p>Recall that every URL has at least three components: the <term>protocol</term>, <term>server</term>, and the <term>path</term>. In our
            case the URL <url href="http://localhost:5000/" visual="http://localhost:5000/">http://localhost:5000/</url> has the server name <em>localhost</em>, the path <em>/</em>, and
            an additional component: the port number, <em>5000</em>. Let's discuss some details about each of these.</p>
  <dl>
    <li>
      <title>Server name</title>
      <p>When you use the name <em>localhost</em> in a URL, the browser attempts to connect to
                        a server program running on your computer. This is the usual scenario when you are developing
                        a web application: the browser and the server application are both running on the same computer.
                        When you deploy the application to be hosted on an actual server, you will use the name
                        of the server in the URL instead of the name <em>localhost</em>. If you want to experiment with
                        deploying Flask applications to a public web server, check out <url href="https://pythonanywhere.com" visual="https://pythonanywhere.com">pythonanywhere.com</url>,
                        which (at the time of writing) provides free hosting for Flask web applications.</p>
    </li>
    <li>
      <title>Port number</title>
      <p>Each server application running on
                        a computer is assigned a distinct port number so that clients can connect to it. Port numbers
                        range from 0 to 65,535. Web servers generally are assigned port number 80, and when the URL
                        does not contain a port number, the web browser attempts to connect to a web server listening
                        on port 80. But the default port number for Flask applications is 5000, so the URL must
                        include that port number. You can specify a different port number for your Flask application
                        in the line that launches the Flask server like this:</p>
      <pre>app.run(host="localhost", port=5001, debug=True)</pre>
      <p>Here, the Flask server binds to port 5001, and you would need to use that port number
                        instead of 5000 in the URL in the browser.</p>
    </li>
    <li>
      <title>Path</title>
      <p>When the Flask receives an incoming request, it examines the path and uses it to determine
                        which function in your program should be executed to handle the request and generate a response.
                        A Flask application can contain one or more of these request handler functions, which are
                        decorated by a line immediately preceding the function that looks like this:</p>
      <pre>@app.route('/')</pre>
      <p>The path in the quotes is matched to the path of the incoming request from the browser.
                        If the incoming path from the browser does not match any of the handler function paths
                        defined by <c>@app.route()</c> decorators,
                        an error occurs. For example, try entering the following URL into your browser when the
                        flaskhello.py program in the last section is running:</p>
      <blockquote>
        <p>
          <url href="http://localhost:5000/blah" visual="http://localhost:5000/blah">http://localhost:5000/blah</url>
        </p>
      </blockquote>
      <p>You will see an error message appear in the browser, and the log message that appears
                        in the console will have the number 404 after the path, indicating that the path
                        did not match, as shown below:</p>
      <pre>127.0.0.1 - - [21/Apr/2016 08:02:51] "GET /blah HTTP/1.1" 404 -</pre>
    </li>
  </dl>
  <p>Here's another version of the flaskhello.py program that has two different
            pages. The first page displays a <q>Hello world</q> message and invites the user to
            click a link to view the time. When the user clicks the link, the time appears.</p>
  <program language="python">
    <code>
 from flask import Flask
 from datetime import datetime

 app = Flask(__name__)

 @app.route('/')
 def hello():
     return HELLO_HTML

 HELLO_HTML = """
     &lt;html&gt;&lt;body&gt;
         &lt;h1&gt;Hello, world!&lt;/h1&gt;
         Click &lt;a href="/time"&gt;here&lt;/a&gt; for the time.
     &lt;/body&gt;&lt;/html&gt;
     """

 @app.route('/time')
 def time():
     return TIME_HTML.format(datetime.now())

 TIME_HTML = """
     &lt;html&gt;&lt;body&gt;
         The time is {0}.
     &lt;/body&gt;&lt;/html&gt;
     """

 if __name__ == "__main__":
     # Launch the Flask dev server
     app.run(host="localhost", debug=True)
</code>
  </program>
  <p>Here's how it works:</p>
  <p>
    <ol marker="1">
      <li>
        <p>To begin, the user enters the URL <url href="http://localhost:5000" visual="http://localhost:5000">http://localhost:5000</url>, and the browser sends
                    the request to the application. The Flask server matches that path <q>/</q> to the
                    hello() function, invokes the function and returns the response to the browser.</p>
      </li>
      <li>
        <p>The user clicks the link, which triggers the browser to send a request with
                    the URL <url href="http://localhost:5000/time" visual="http://localhost:5000/time">http://localhost:5000/time</url> to the Flask server. The server matches the
                    path <q>/time</q> to the time() function, invokes the function and returns a response
                    containing the time to the browser.</p>
      </li>
    </ol>
  </p>
  <p>Note that the user does not have to click the link in order to display the time. For
            example, the user could enter the URL <url href="http://localhost:5000/time" visual="http://localhost:5000/time">http://localhost:5000/time</url> directly into the
            browser to bypass the greeting page and get directly to the page showing the time.</p>
  <p>The example above used the format() method to build an HTML string. For more information
            on format(), see <xref ref="strings_string-methods"/>.</p>
  <p>Also, notice how the example above defines separate HELLO_HTML and TIME_HTML variables to hold the HTML. This helps
            reduce cluttering the handler functions with HTML code, and separating the Python logic from the HTML also improves the
            overall readability and maintainability of the code.</p>
</section>
