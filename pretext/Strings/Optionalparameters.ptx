<?xml version="1.0"?>
<section xml:id="strings_optional-parameters">
  <title>Optional parameters</title>
  <p>To find the locations of the second or third occurrence of a character in a
            string, we can modify the <c>find</c> function, adding a third parameter for the
            starting position in the search string:</p>
  <program xml:id="ch08_fun4" interactive="activecode" language="python">
    <code>
def find2(astring, achar, start):
    """
    Find and return the index of achar in astring.
    Return -1 if achar does not occur in astring.
    """
    ix = start
    found = False
    while ix &lt; len(astring) and not found:
        if astring[ix] == achar:
            found = True
        else:
            ix = ix + 1
    if found:
        return ix
    else:
        return -1

print(find2('banana', 'a', 2))
        </code>
  </program>
  <p>The call <c>find2('banana', 'a', 2)</c> now returns <c>3</c>, the index of the first
            occurrence of &#x2018;a' in &#x2018;banana' after index 2. What does
            <c>find2('banana', 'n', 3)</c> return? If you said, 4, there is a good chance you
            understand how <c>find2</c> works.  Try it.</p>
  <p>Better still, we can combine <c>find</c> and <c>find2</c> using an
            <term>optional parameter</term>.</p>
  <program xml:id="chp08_fun5" interactive="activecode" language="python">
    <code>
def find3(astring, achar, start=0):
    """
    Find and return the index of achar in astring.
    Return -1 if achar does not occur in astring.
    """
    ix = start
    found = False
    while ix &lt; len(astring) and not found:
        if astring[ix] == achar:
            found = True
        else:
            ix = ix + 1
    if found:
        return ix
    else:
        return -1

print(find3('banana', 'a', 2))
        </code>
  </program>
  <p>The call <c>find3('banana', 'a', 2)</c> to this version of <c>find</c> behaves just
            like <c>find2</c>, while in the call <c>find3('banana', 'a')</c>, <c>start</c> will be
            set to the <term>default value</term> of <c>0</c>.</p>
  <p>Adding another optional parameter to <c>find</c> makes it search from a starting
            position, up to but not including the end position.</p>
  <program xml:id="chp08_fun6" interactive="activecode" language="python">
    <code>
def find4(astring, achar, start=0, end=None):
    """
    Find and return the index of achar in astring.
    Return -1 if achar does not occur in astring.
    """
    ix = start
    if end == None:
        end = len(astring)

    found = False
    while ix &lt; end and not found:
        if astring[ix] == achar:
            found = True
        else:
            ix = ix + 1
    if found:
        return ix
    else:
        return -1

ss = "Python strings have some interesting methods."

print(find4(ss, 's'))
print(find4(ss, 's', 7))
print(find4(ss, 's', 8))
print(find4(ss, 's', 8, 13))
print(find4(ss, '.'))
        </code>
  </program>
  <p>The optional value for <c>end</c> is interesting.  We give it a default value <c>None</c> if the
            caller does not supply any argument.  In the body of the function we test what <c>end</c> is
            and if the caller did not supply any argument, we reassign <c>end</c> to be the length of the string.
            If the caller has supplied an argument for <c>end</c>, however, the caller's value will be used in the loop.</p>
  <p>The semantics of <c>start</c> and <c>end</c> in this function are precisely the same as they are in
            the <c>range</c> function.</p>
</section>
