<?xml version="1.0"?>
<section xml:id="strings_the-accumulator-pattern-with-strings">
  <title>The Accumulator Pattern with Strings</title>
  <p>Combining the <c>in</c> operator with string concatenation using <c>+</c> and the accumulator pattern, we can
            write a function that removes all the vowels from a string.  The idea is to start with a string and iterate over each character, checking to see if the character is a vowel.  As we process the characters, we will build up a new string consisting of only the nonvowel characters.  To do this, we use the accumulator pattern.</p>
  <p>Remember that the accumulator pattern allows us to keep a <q>running total</q>.  With strings, we are not accumulating a numeric total.  Instead we are accumulating characters onto a string.</p>
  <program xml:id="ch08_acc1" interactive="activecode" language="python">
    <code>
def removeVowels(s):
    vowels = "aeiouAEIOU"
    sWithoutVowels = ""
    for eachChar in s:
        if eachChar not in vowels:
            sWithoutVowels = sWithoutVowels + eachChar
    return sWithoutVowels

print(removeVowels("compsci"))
print(removeVowels("aAbEefIijOopUus"))
    </code>
  </program>
  <p>Line 5 uses the <c>not in</c> operator to check whether the current character is not in the string <c>vowels</c>. The alternative to using this operator would be to write a very large <c>if</c> statement that checks each of the individual vowel characters.  Note we would need to use logical <c>and</c> to be sure that the character is not any of the vowels.</p>
  <program language="python">
    <code>
if eachChar != 'a'  and eachChar != 'e'  and eachChar != 'i'  and
   eachChar != 'o'  and eachChar != 'u'  and eachChar != 'A'  and
   eachChar != 'E'  and eachChar != 'I'  and eachChar != 'O'  and
   eachChar != 'U':

     sWithoutVowels = sWithoutVowels + eachChar
    </code>
  </program>
  <p>Look carefully at line 6 in the above program (<c>sWithoutVowels = sWithoutVowels + eachChar</c>).  We will do this for every character that is not a vowel.  This should look
            very familiar.  As we were describing earlier, it is an example of the accumulator pattern, this time using a string to <q>accumulate</q> the final result.
            In words it says that the new value of <c>sWithoutVowels</c> will be the old value of <c>sWithoutVowels</c> concatenated with
            the value of <c>eachChar</c>.  We are building the result string character by character.</p>
  <p>Take a close look also at the initialization of <c>sWithoutVowels</c>.  We start with an empty string and then begin adding
            new characters to the end.</p>
  <p>Step through the function using codelens to see the accumulator variable grow.</p>
  <program xml:id="ch08_acc2" interactive="codelens" language="python">
    <code>
def removeVowels(s):
    vowels = "aeiouAEIOU"
    sWithoutVowels = ""
    for eachChar in s:
        if eachChar not in vowels:
            sWithoutVowels = sWithoutVowels + eachChar
    return sWithoutVowels

print(removeVowels("compsci"))
    </code>
  </program>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="test_question8_11_1">
    <statement>
      <p>What is printed by the following statements:</p>
      <program language="python">
        <code>
s = "ball"
r = ""
for item in s:
    r = item.upper() + r
print(r)
        </code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Ball</p>
        </statement>
        <feedback><p>
                    Each item is converted to upper case before concatenation.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>BALL</p>
        </statement>
        <feedback><p>
                    Each character is converted to upper case but the order is wrong.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>LLAB</p>
        </statement>
        <feedback><p>
                    Yes, the order is reversed due to the order of the concatenation.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <note>
    <p>This workspace is provided for your convenience.  You can use this activecode window to try out anything you like.</p>
    <program xml:id="scratch_08_03" interactive="activecode" language="python">
      <code>


      </code>
    </program>
  </note>
</section>
