<?xml version="1.0"?>
<section xml:id="strings_operations-on-strings">
  <title>Operations on Strings</title>
  <p>In general, you cannot perform mathematical operations on strings, even if the
            strings look like numbers. The following are illegal (assuming that <c>message</c>
            has type string):</p>
  <program language="python">
    <code>
message - 1
"Hello" / 123
message * "Hello"
"15" + 2
</code>
  </program>
  <p>Interestingly, the <c>+</c> operator does work with strings, but for strings, the
            <c>+</c> operator represents <term>concatenation</term>, not addition.  Concatenation means
            joining the two operands by linking them end-to-end. For example:</p>
  <program xml:id="ch08_add" interactive="activecode" language="python">
    <code>
fruit = "banana"
bakedGood = " nut bread"
print(fruit + bakedGood)
        </code>
  </program>
  <p>The output of this program is <c>banana nut bread</c>. The space before the word
            <c>nut</c> is part of the string and is necessary to produce the space between
            the concatenated strings.  Take out the space and run it again.</p>
  <p>The <c>*</c> operator also works on strings.  It performs repetition. For example,
            <c>'Fun'*3</c> is <c>'FunFunFun'</c>. One of the operands has to be a string and the
            other has to be an integer.</p>
  <program xml:id="ch08_mult" interactive="activecode" language="python">
    <code>
print("Go" * 6)

name = "Packers"
print(name * 3)

print(name + "Go" * 3)

print((name + "Go") * 3)
        </code>
  </program>
  <p>This interpretation of <c>+</c> and <c>*</c> makes sense by analogy with
            addition and multiplication. Just as <c>4*3</c> is equivalent to <c>4+4+4</c>, we
            expect <c>"Go"*3</c> to be the same as <c>"Go"+"Go"+"Go"</c>, and it is.  Note also in the last
            example that the order of operations for <c>*</c> and <c>+</c> is the same as it was for arithmetic.
            The repetition is done before the concatenation.  If you want to cause the concatenation to be
            done first, you will need to use parenthesis.</p>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="test_question8_1_1">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <code>
s = "python"
t = "rocks"
print(s + t)
</code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>python rocks</p>
        </statement>
        <feedback><p>
                    Concatenation does not automatically add a space.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>python</p>
        </statement>
        <feedback><p>
                    The expression s+t is evaluated first, then the resulting string is printed.
                </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>pythonrocks</p>
        </statement>
        <feedback><p>
                    Yes, the two strings are glued end to end.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>Error, you cannot add two strings together.</p>
        </statement>
        <feedback><p>
                    The + operator has different meanings depending on the operands, in this case, two strings.
                </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="test_question8_1_2">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <code>
s = "python"
excl = "!"
print(s+excl*3)
</code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>python!!!</p>
        </statement>
        <feedback><p>
                    Yes, repetition has precedence over concatenation
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>python!python!python!</p>
        </statement>
        <feedback><p>
                    Repetition is done first.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>pythonpythonpython!</p>
        </statement>
        <feedback><p>
                    The repetition operator is working on the excl variable.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>Error, you cannot perform concatenation and repetition at the same time.</p>
        </statement>
        <feedback><p>
                    The + and * operator are defined for strings as well as numbers.
                </p></feedback>
      </choice>
    </choices>
  </exercise>
</section>
