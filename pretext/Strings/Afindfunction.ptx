<?xml version="1.0"?>
<section xml:id="strings_a-find-function">
  <title>A <c>find</c> function</title>
  <p>Here is an implementation for a restricted <c>find</c> method, where the target is a single character.</p>
  <program xml:id="ch08_run3" interactive="activecode" language="python">
    <code>
def find(astring, achar):
    """
    Find and return the index of achar in astring.
    Return -1 if achar does not occur in astring.
    """
    ix = 0
    found = False
    while ix &lt; len(astring) and not found:
        if astring[ix] == achar:
            found = True
        else:
            ix = ix + 1
    if found:
        return ix
    else:
        return -1

print(find("Compsci", "p"))
print(find("Compsci", "C"))
print(find("Compsci", "i"))
print(find("Compsci", "x"))
        </code>
  </program>
  <p>In a sense, <c>find</c> is the opposite of the indexing operator. Instead of taking
            an index and extracting the corresponding character, it takes a character and
            finds the index where that character appears for the first time. If the character is not found,
            the function returns <c>-1</c>.</p>
  <p>The <c>while</c> loop in this example uses a slightly more complex condition than we have seen
            in previous programs.  Here there are two parts to the condition.  We want to keep going if there
            are more characters to look through and we want to keep going if we have not found what we are
            looking for.  The variable <c>found</c> is a boolean variable that keeps track of whether we have found
            the character we are searching for.  It is initialized to <em>False</em>.  If we find the character, we
            reassign <c>found</c> to <em>True</em>.</p>
  <p>The other part of the condition is the same as we used previously to traverse the characters of the
            string.  Since we have now combined these two parts with a logical <c>and</c>, it is necessary for them
            both to be <em>True</em> to continue iterating.  If one part fails, the condition fails and the iteration stops.</p>
  <p>When the iteration stops, we must ask a question to find out the individual condition that caused the termination,
            and then return the proper value.  This is a pattern for dealing with while loops with compound conditions.</p>
  <note>
    <p>This pattern of computation is sometimes called a eureka traversal because as
                soon as we find what we are looking for, we can cry Eureka!  and stop looking.  The way
                we stop looking is by setting <c>found</c> to True which causes the condition to fail.</p>
  </note>
</section>
