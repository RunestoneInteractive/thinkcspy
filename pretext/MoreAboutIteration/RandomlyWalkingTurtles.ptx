<?xml version="1.0"?>
<section xml:id="more-about-iteration_randomly-walking-turtles">
  <title>Randomly Walking Turtles</title>
  <p>Suppose we want to entertain ourselves by watching a turtle wander around
            randomly inside the screen.  When we run the program we want the turtle and
            program to behave in the following way:</p>
  <p>
    <ol marker="1">
      <li>
        <p>The turtle begins in the center of the screen.</p>
      </li>
      <li>
        <p>Flip a coin. If it's heads then turn to the left 90 degrees. If it's tails
                    then turn to the right 90 degrees.</p>
      </li>
      <li>
        <p>Take 50 steps forward.</p>
      </li>
      <li>
        <p>If the turtle has moved outside the screen then stop, otherwise go back to
                    step 2 and repeat.</p>
      </li>
    </ol>
  </p>
  <p>Notice that we cannot predict how many times the turtle will need to flip the
            coin before it wanders out of the screen, so we can't use a for loop in this
            case. In fact, although very unlikely, this program might never end,
            that is why we call this indefinite iteration.</p>
  <p>So based on the problem description above, we can outline a program as follows:</p>
  <program language="python">
    <code>
create a window and a turtle

while the turtle is still in the window:
    generate a random number between 0 and 1
    if the number == 0 (heads):
        turn left
    else:
        turn right
    move the turtle forward 50
</code>
  </program>
  <p>Now, probably the only thing that seems a bit confusing to you is the part
            about whether or not the turtle is still in the screen.  But this is the nice
            thing about programming, we can delay the tough stuff and get <em>something</em> in
            our program working right away.  The way we are going to do this is to
            delegate the work of deciding whether the turtle is still in the screen or
            not to a boolean function.  Let's call this boolean function <c>isInScreen</c> We
            can write a very simple version of this boolean function by having
            it always return <c>True</c>, or by having it decide randomly,
            the point is to have it do something simple so that we can focus on the parts
            we already know how to do well and get them working.  Since having it always
            return true would not be a good idea we will write our version to decide
            randomly.  Let's say that there is a 90% chance the turtle is still in the
            window and 10% that the turtle has escaped.</p>
  <program xml:id="iter_randwalk1" interactive="activecode" language="python">
    <code>
import random
import turtle


def isInScreen(w, t):
    if random.random() &gt; 0.1:
        return True
    else:
        return False


t = turtle.Turtle()
wn = turtle.Screen()

t.shape('turtle')
while isInScreen(wn, t):
    coin = random.randrange(0, 2)
    if coin == 0:              # heads
        t.left(90)
    else:                      # tails
        t.right(90)

    t.forward(50)

wn.exitonclick()
        </code>
  </program>
  <p>Now we have a working program that draws a random walk of our turtle that has
            a 90% chance of staying on the screen.  We are in a good position,
            because a large part of our program is working and we can focus on the next
            bit of work &#x2013; deciding whether the turtle is inside the screen boundaries or
            not.</p>
  <p>We can find out the width and the height of the screen using the
            <c>window_width</c> and <c>window_height</c> methods of the screen object.
            However, remember that the turtle starts at position 0,0 in the middle of the
            screen.  So we never want the turtle to go farther right than width/2 or
            farther left than negative width/2.  We never want the turtle to go further
            up than height/2 or further down than negative height/2.  Once we know what
            the boundaries are we can use some conditionals to check the turtle position
            against the boundaries and return <c>False</c> if the turtle is outside or
            <c>True</c> if the turtle is inside.</p>
  <p>Once we have computed our boundaries we can get the current position of the
            turtle and then use conditionals to decide.  Here is one implementation:</p>
  <program language="python">
    <code>
def isInScreen(wn,t):
    leftBound = -(wn.window_width() / 2)
    rightBound = wn.window_width() / 2
    topBound = wn.window_height() / 2
    bottomBound = -(wn.window_height() / 2)

    turtleX = t.xcor()
    turtleY = t.ycor()

    stillIn = True
    if turtleX &gt; rightBound or turtleX &lt; leftBound:
        stillIn = False
    if turtleY &gt; topBound or turtleY &lt; bottomBound:
        stillIn = False

    return stillIn
</code>
  </program>
  <p>There are lots of ways that the conditional could be written.  In this case
            we have given <c>stillIn</c> the default value of <c>True</c> and use two <c>if</c>
            statements
            to possibly set the value to <c>False</c>.  You could rewrite this to use nested
            conditionals or <c>elif</c> statements and set <c>stillIn</c> to <c>True</c> in an else
            clause.</p>
  <p>Here is the full version of our random walk program.</p>
  <program xml:id="iter_randwalk2" interactive="activecode" language="python">
    <code>
import random
import turtle

def isInScreen(w,t):
    leftBound = - w.window_width() / 2
    rightBound = w.window_width() / 2
    topBound = w.window_height() / 2
    bottomBound = -w.window_height() / 2

    turtleX = t.xcor()
    turtleY = t.ycor()

    stillIn = True
    if turtleX &gt; rightBound or turtleX &lt; leftBound:
        stillIn = False
    if turtleY &gt; topBound or turtleY &lt; bottomBound:
        stillIn = False

    return stillIn

t = turtle.Turtle()
wn = turtle.Screen()

t.shape('turtle')
while isInScreen(wn,t):
    coin = random.randrange(0, 2)
    if coin == 0:
        t.left(90)
    else:
        t.right(90)

    t.forward(50)

wn.exitonclick()
        </code>
  </program>
  <p>We could have written this program without using a boolean function.
            You might want to try to rewrite it using a complex condition on the while statement.
            However, using a boolean function makes the program much more readable and easier
            to understand.  It also gives us another tool to use if this was a
            larger program and we needed to have a check for whether the turtle
            was still in the screen in another part of the program.  Another advantage is
            that if you ever need to write a similar program, you can reuse this function
            with confidence the next time you need it.  Breaking up this
            program into a couple of parts is another example of functional decomposition.</p>
  <p xml:id="more-about-iteration-index-0">
    <term>Check your understanding</term>
  </p>
  <exercise label="test_question7_3_1">
    <statement>
      <p>Which type of loop can be used to perform the following iteration: You choose a positive integer at random and then print the numbers from 1 up to and including the selected integer.</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>a for-loop or a while-loop</p>
        </statement>
        <feedback><p>
                    Although you do not know how many iterations you loop will run before the program starts running, once you have chosen your random integer, Python knows exactly how many iterations the loop will run, so either a for-loop or a while-loop will work.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>only a for-loop</p>
        </statement>
        <feedback><p>
                    As you learned in section 7.2, a while-loop can always be used for anything a for-loop can be used for.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>only a while-loop</p>
        </statement>
        <feedback><p>
                    Although you do not know how many iterations you loop will run before the program starts running, once you have chosen your random integer, Python knows exactly how many iterations the loop will run, so this is an example of definite iteration.
                </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="test_question7_3_2">
    <statement>
      <p>In the random walk program in this section, what does the isInScreen function do?</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>Returns True if the turtle is still on the screen and False if the turtle is no longer on the screen.</p>
        </statement>
        <feedback><p>
                    The isInScreen function computes the boolean test of whether the turtle is still in the window.  It makes the condition of the while loop in the main part of the code simpler.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>Uses a while loop to move the turtle randomly until it goes off the screen.</p>
        </statement>
        <feedback><p>
                    The isInScreen function does not contain a while-loop.  That loop is outside the isInScreen function.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>Turns the turtle right or left at random and moves the turtle forward 50.</p>
        </statement>
        <feedback><p>
                    The isInScreen function does not move the turtle.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>Calculates and returns the position of the turtle in the window.</p>
        </statement>
        <feedback><p>
                    While the isInScreen function does use the size of the window and position of the turtle, it does not return the turtle position.
                </p></feedback>
      </choice>
    </choices>
  </exercise>
</section>
