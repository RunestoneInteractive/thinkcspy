<?xml version="1.0"?>
<section xml:id="more-about-iteration_other-uses-of-while">
  <title>Other uses of <c>while</c></title>
  <subsection xml:id="more-about-iteration_sentinel-values">
    <title>Sentinel Values</title>
    <p>Indefinite loops are much more common in the real world than definite loops.</p>
    <p>
      <ul>
        <li>
          <p>If you are selling tickets to an event, you don't know in advance how
                        many tickets you will sell. You keep selling tickets as long as people come
                        to the door and there's room in the hall.</p>
        </li>
        <li>
          <p>When the baggage crew unloads a plane, they don't know in advance how many
                        suitcases there are. They just keep unloading while there are bags left in the
                        cargo hold. (Why <em>your</em> suitcase is always the last one is an entirely different problem.)</p>
        </li>
        <li>
          <p>When you go through the checkout line at the grocery, the clerks don't
                        know in advance how many items there are. They just keep ringing up items as
                        long as there are more on the conveyor belt.</p>
        </li>
      </ul>
    </p>
    <p>Let's implement the last of these in Python, by asking the user for prices and
                keeping a running total and count of items. When the last item is entered,
                the program gives the grand total, number of items, and average price.
                We'll need these variables:</p>
    <p>
      <ul>
        <li>
          <p><c>total</c> - this will start at zero</p>
        </li>
        <li>
          <p><c>count</c> - the number of items, which also starts at zero</p>
        </li>
        <li>
          <p><c>moreItems</c> - a boolean that tells us whether more items are waiting; this starts as True</p>
        </li>
      </ul>
    </p>
    <p>The pseudocode (code written half in English, half in Python) for the body of the loop
                looks something like this:</p>

    <pre>
    while moreItems
        ask for price
        add price to total
        add one to count
    </pre>

    <p>This pseudocode has no option to set <c>moreItems</c> to <c>False</c>, so it would run forever.
                In a grocery store, there's a little
                plastic bar that you put after your last item to separate your groceries from
                those of the person behind you; that's how the clerk knows you have no more items.
                We don't have a <q>little plastic bar</q> data type in Python, so we'll do the next best thing: we
                will use a <c>price</c> of zero to mean <q>this is my last item.</q> In this program,
                zero is a <term>sentinel value</term>, a value used to signal the end of the loop. Here's the code:</p>
    <program xml:id="ch07_sentinel" interactive="activecode" language="python">
      <input>
def checkout():
    total = 0
    count = 0
    moreItems = True
    while moreItems:
        price = float(input('Enter price of item (0 when done): '))
        if price != 0:
            count = count + 1
            total = total + price
            print('Subtotal: $', total)
        else:
            moreItems = False
    average = total / count
    print('Total items:', count)
    print('Total $', total)
    print('Average price per item: $', average)

checkout()
        </input>
    </program>

    <p>There are still a few problems with this program.</p>
    <p>
      <ul>
        <li>
          <p>If you enter a negative number, it will be added to the total and count. Modify the code
                        so that negative numbers give an error message instead (but don't end the loop) Hint: <c>elif</c> is
                        your friend.</p>
        </li>
        <li>
          <p>If you enter zero the first time you are asked for a price, the loop will end, and the program
                        will try to divide by zero. Use an <c>if</c>/<c>else</c> statement outside the loop to avoid the
                        division by zero and tell the user that you can't compute an average without data.</p>
        </li>
        <li>
          <p>This program doesn't display the amounts to two decimal places. In the next chapter you will
                        see the <xref ref="strings_string-methods"/> that will do the trick.</p>

          </li>
      </ul>
            <term>Check your understanding</term>
          </p>
          <exercise label="ch07_sentinel_2">
            <statement>
              <p>True or False: A while loop will continue to iterate forever unless it meets a condition to stop.</p>
            </statement>
            <choices>
              <choice correct="yes">
                <statement>
                  <p>True</p>
                </statement>
                <feedback><p>
                    Keep in mind there are multiple ways to stop a while loop, such as a sentinal value.
                </p></feedback>
              </choice>
              <choice>
                <statement>
                  <p>False</p>
                </statement>
                <feedback><p>
                    While loops do not have a set number of times they will iterate, so they will continue until something breaks the loop. Keep this in mind while coding with while loops.
                </p></feedback>
              </choice>
            </choices>
          </exercise>

  </subsection>
  <subsection xml:id="more-about-iteration_validating-input">
    <title>Validating Input</title>
    <p>You can also use a <c>while</c> loop when you want to <term>validate</term> input;  when you want to make
                sure the user has entered valid input for a prompt. Let's say you want a function
                that asks a yes-or-no question. In this case, you want to make sure that the person using
                your program enters either a Y for yes or N for no (in either upper or lower case).
                Here is a program that uses a <c>while</c> loop to keep asking until it receives a valid answer.
                As a preview of coming attractions, it uses
                the <c>upper()</c> method which is described in <xref ref="strings_string-methods"/> to convert a string to upper case.
                When you run the following code, try typing something other than Y or N to see how the code reacts:</p>
    <program xml:id="ch07_validation" interactive="activecode" language="python">
      <input>
def get_yes_or_no(message):
    valid_input = False
    answer = input(message)
    while not valid_input:
        answer = answer.upper() # convert to upper case
        if answer == 'Y' or answer == 'N':
            valid_input = True
        else:
            answer = input('Please enter Y for yes or N for no. \n' + message)
    return answer

response = get_yes_or_no('Do you like lima beans? Y)es or N)o: ')
if response == 'Y':
    print('Great! They are very healthy.')
else:
    print('Too bad. If cooked right, they are quite tasty.')
        </input>
    </program>
  </subsection>
</section>
