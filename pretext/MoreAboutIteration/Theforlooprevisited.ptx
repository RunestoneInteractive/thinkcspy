<?xml version="1.0"?>
<section xml:id="more-about-iteration_the-for-loop-revisited">
  <title>The <c>for</c> loop revisited</title>
  <p>Recall that the <c>for</c> loop processes each item in a list.  Each item in
            turn is (re-)assigned to the loop variable, and the body of the loop is executed.
            We saw this example in an earlier chapter.</p>
  <program xml:id="ch07_for1" interactive="activecode" language="python">
    <code>
for f in ["Joe", "Amy", "Brad", "Angelina", "Zuki", "Thandi", "Paris"]:
    print("Hi", f, "Please come to my party on Saturday")
        </code>
  </program>
  <p>We have also seen iteration paired with the update idea to form the accumulator pattern.  For example, to compute
            the sum of the first n integers, we could create a for loop using the <c>range</c> to produce the numbers 1 through n.
            Using the accumulator pattern, we can start with a running total variable initialized to 0 and on each iteration, add the current value of the loop
            variable.  A function to compute this sum is shown below.</p>
  <program xml:id="ch07_summation" interactive="activecode" language="python">
    <code>
def sumTo(aBound):
    theSum = 0
    for aNumber in range(1, aBound + 1):
        theSum = theSum + aNumber

    return theSum

print(sumTo(4))

print(sumTo(1000))
        </code>
  </program>
  <p>To review, the variable <c>theSum</c> is called the accumulator.  It is initialized to zero before we start the loop.  The loop variable, <c>aNumber</c> will take on the values produced by the <c>range(1, aBound + 1)</c> function call.  Note that this produces all the integers from 1 up to the value of <c>aBound</c>.  If we had not added 1 to <c>aBound</c>, the range would have stopped one value short since <c>range</c> does not include the upper bound.</p>
  <p>The assignment statement, <c>theSum = theSum + aNumber</c>, updates <c>theSum</c> each time through the loop.  This accumulates the running total.  Finally, we return the value of the accumulator.</p>
  <p>
    <term>Check Your Understanding</term>
  </p>
  <exercise label="mc07_8_2">
    <statement>
      <p>The following code contains an nested loop.  How many times will the phrase <term><q>We made it here!</q></term> be printed on the console?</p>
      <program language="python">
        <code>
def printnums(x,y):
    for h in range(y):
        print("We made it here!")
        for i in range(x):
            print("We made it here!")

printnums(5, 3)
</code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback><p>
                    This is how many times the inner loop will print for each iteration of the outer loop.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>8</p>
        </statement>
        <feedback><p>
                    Keep in mind that the inner loop is part of the body of the outer loop.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>15</p>
        </statement>
        <feedback><p>
                    The inner loop will print a total of 15 times; however the outer loop is also printing the same phrase.
                </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>18</p>
        </statement>
        <feedback><p>
                    Correct! The nested loop will be run 3 times, making a total of 18.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>20</p>
        </statement>
        <feedback><p>
                    Pay attention to the order of x and y
                </p></feedback>
      </choice>
    </choices>
  </exercise>
</section>
