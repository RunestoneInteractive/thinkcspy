<?xml version="1.0"?>
<section xml:id="lists_list-methods">
  <title>List Methods</title>
  <p>The dot operator can also be used to access built-in methods of list objects.
            <c>append</c> is a list method which adds the argument passed to it to the end of
            the list. Continuing with this example, we show several other list methods.  Many of them are
            easy to understand.</p>
  <program xml:id="chp09_meth1" interactive="activecode" language="python">
    <input>
mylist = []
mylist.append(5)
mylist.append(27)
mylist.append(3)
mylist.append(12)
print(mylist)

mylist.insert(1, 12)        # Insert 12 at pos 1, shift other items up
print(mylist)
print(mylist.count(12))     # How many times is 12 in mylist?

print(mylist.index(3))      # Find index of first 3 in mylist
print(mylist.count(5))

mylist.reverse()
print(mylist)

mylist.sort()
print(mylist)

mylist.remove(5)            # Removes the second 12 in the list
print(mylist)

lastitem = mylist.pop()     # Removes and returns the last item of the list
print(lastitem)
print(mylist)
        </input>
  </program>
  <p>There are two ways to use the <c>pop</c> method.  The first, with no parameter, will remove and return the
            last item of the list.  If you provide a parameter for the position, <c>pop</c> will remove and return the
            item at that position.  Either way the list is changed.</p>
  <p>The following table provides a summary of the list methods shown above.  The column labeled
            result gives an explanation as to what the return value is as it relates to the new value of the list.  The word
            <term>mutator</term> means that the list is changed by the method but nothing is returned (actually <c>None</c> is returned).  A <term>hybrid</term> method is one that not only changes the list but also returns a value as its result.  Finally, if the result is simply a return, then the list
            is unchanged by the method.</p>
  <p>Be sure
            to experiment with these methods to gain a better understanding of what they do.</p>
  <table>
    <tabular>
      <row header="yes">
        <cell>
                            Method
                        </cell>
        <cell>
                            Parameters
                        </cell>
        <cell>
                            Result
                        </cell>
        <cell>
                            Description
                        </cell>
      </row>
      <row>
        <cell>
                            append
                        </cell>
        <cell>
                            item
                        </cell>
        <cell>
                            mutator
                        </cell>
        <cell>
                            Adds a new item to the end of a list
                        </cell>
      </row>
      <row>
        <cell>
                            insert
                        </cell>
        <cell>
                            position, item
                        </cell>
        <cell>
                            mutator
                        </cell>
        <cell>
                            Inserts a new item at the position given
                        </cell>
      </row>
      <row>
        <cell>
                            pop
                        </cell>
        <cell>
                            none
                        </cell>
        <cell>
                            hybrid
                        </cell>
        <cell>
                            Removes and returns the last item
                        </cell>
      </row>
      <row>
        <cell>
                            pop
                        </cell>
        <cell>
                            position
                        </cell>
        <cell>
                            hybrid
                        </cell>
        <cell>
                            Removes and returns the item at position
                        </cell>
      </row>
      <row>
        <cell>
                            sort
                        </cell>
        <cell>
                            none
                        </cell>
        <cell>
                            mutator
                        </cell>
        <cell>
                            Modifies a list to be sorted
                        </cell>
      </row>
      <row>
        <cell>
                            reverse
                        </cell>
        <cell>
                            none
                        </cell>
        <cell>
                            mutator
                        </cell>
        <cell>
                            Modifies a list to be in reverse order
                        </cell>
      </row>
      <row>
        <cell>
                            index
                        </cell>
        <cell>
                            item
                        </cell>
        <cell>
                            return idx
                        </cell>
        <cell>
                            Returns the position of first occurrence of item
                        </cell>
      </row>
      <row>
        <cell>
                            count
                        </cell>
        <cell>
                            item
                        </cell>
        <cell>
                            return ct
                        </cell>
        <cell>
                            Returns the number of occurrences of item
                        </cell>
      </row>
      <row>
        <cell>
                            remove
                        </cell>
        <cell>
                            item
                        </cell>
        <cell>
                            mutator
                        </cell>
        <cell>
                            Removes the first occurrence of item
                        </cell>
      </row>
    </tabular>
  </table>
  <p>Details for these and others
            can be found in the <url href="http://docs.python.org/py3k/library/stdtypes.html#sequence-types-str-bytes-bytearray-list-tuple-range" visual="http://docs.python.org/py3k/library/stdtypes.html#sequence-types-str-bytes-bytearray-list-tuple-range">Python Documentation</url>.</p>
  <p>It is important to remember that methods like <c>append</c>, <c>sort</c>,
            and <c>reverse</c> all return <c>None</c>.  This means that re-assigning <c>mylist</c> to the result of sorting <c>mylist</c> will result in losing the entire list.  Calls like these will likely never appear as part of an assignment statement (see line 8 below).</p>
  <program xml:id="chp09_meth2" interactive="activecode" language="python">
    <input>
mylist = []
mylist.append(5)
mylist.append(27)
mylist.append(3)
mylist.append(12)
print(mylist)

mylist = mylist.sort()   #probably an error
print(mylist)
        </input>
  </program>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="test_question9_13_1">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <input>
alist = [4, 2, 8, 6, 5]
alist.append(True)
alist.append(False)
print(alist)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[4, 2, 8, 6, 5, False, True]</p>
        </statement>
        <feedback><p>
                    True was added first, then False was added last.
                </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>[4, 2, 8, 6, 5, True, False]</p>
        </statement>
        <feedback><p>
                    Yes, each item is added to the end of the list.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>[True, False, 4, 2, 8, 6, 5]</p>
        </statement>
        <feedback><p>
                    append adds at the end, not the beginning.
                </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="test_question9_13_2">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <input>
alist = [4, 2, 8, 6, 5]
alist.insert(2, True)
alist.insert(0, False)
print(alist)
</input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>[False, 4, 2, True, 8, 6, 5]</p>
        </statement>
        <feedback><p>
                    Yes, first True was added at index 2, then False was added at index 0.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>[4, False, True, 2, 8, 6, 5]</p>
        </statement>
        <feedback><p>
                    insert will place items at the index position specified and move everything down to the right.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>[False, 2, True, 6, 5]</p>
        </statement>
        <feedback><p>
                    insert does not remove anything or replace anything.
                </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="test_question9_13_3">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <input>
alist = [4, 2, 8, 6, 5]
temp = alist.pop(2)
temp = alist.pop()
print(alist)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[4, 8, 6]</p>
        </statement>
        <feedback><p>
                    pop(2) removes the item at index 2, not the 2 itself.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>[2, 6, 5]</p>
        </statement>
        <feedback><p>
                    pop() removes the last item, not the first.
                </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>[4, 2, 6]</p>
        </statement>
        <feedback><p>
                    Yes, first the 8 was removed, then the last item, which was 5.
                </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="test_question9_13_4">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <input>
alist = [4, 2, 8, 6, 5]
alist = alist.pop(0)
print(alist)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[2, 8, 6, 5]</p>
        </statement>
        <feedback><p>
                    alist is now the value that was returned from pop(0).
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>[4, 2, 8, 6, 5]</p>
        </statement>
        <feedback><p>
                    pop(0) changes the list by removing the first item.
                </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>4</p>
        </statement>
        <feedback><p>
                    Yes, first the 4 was removed from the list, then returned and assigned to alist.  The list is lost.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>None</p>
        </statement>
        <feedback><p>
                    pop(0) returns the first item in the list so alist has now been changed.
                </p></feedback>
      </choice>
    </choices>
  </exercise>
  <note>
    <p>This workspace is provided for your convenience.  You can use this activecode window to try out anything you like.</p>
    <program xml:id="scratch_09_03" interactive="activecode" language="python">
      <input>


        </input>
    </program>
  </note>
</section>
