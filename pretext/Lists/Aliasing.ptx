<?xml version="1.0"?>
<section xml:id="lists_aliasing">
  <title>Aliasing</title>
  <p>Since variables refer to objects, if we assign one variable to another, both
            variables refer to the same object:</p>
  <program xml:id="listalias1" interactive="activecode" language="python">
    <code>
a = [81, 82, 83]
b = a
print(a is b)
    </code>
  </program>
  <p>In this case, the reference diagram looks like this:</p>
  <image source="Lists/Figures/refdiag4.png" width="50%" alt="State snapshot for multiple references (aliases) to a list"/>
  <p>Because the same list has two different names, <c>a</c> and <c>b</c>, we say that it
            is <term>aliased</term>. Changes made with one alias affect the other.  In the codelens example below, you can see that <c>a</c> and <c>b</c> refer
            to the same list after executing the assignment statement <c>b = a</c>.
  </p>
  <program xml:id="chp09_is3" interactive="codelens" language="python">
    <code>
          a = [81, 82, 83]
          b = [81, 82, 83]

          print(a == b)
          print(a is b)

          b = a
          print(a == b)
          print(a is b)

          b[0] = 5
          print(a)
    </code>
  </program>
  <p>Although this behavior can be useful, it is sometimes unexpected or
            undesirable. In general, it is safer to avoid aliasing when you are working
            with mutable objects. Of course, for immutable objects, there's no problem.
            That's why Python is free to alias strings and integers when it sees an opportunity to
            economize.</p>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="test_question9_10_1">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <code>
alist = [4, 2, 8, 6, 5]
blist = alist
blist[3] = 999
print(alist)
        </code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[4, 2, 8, 6, 5]</p>
        </statement>
        <feedback><p>
                    blist is not a copy of alist, it is a reference to the list alist refers to.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>[4, 2, 8, 999, 5]</p>
        </statement>
        <feedback><p>
                    Yes, since alist and blist both reference the same list, changes to one also change the other.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="test_question9_10_2">
    <statement>
      <blockquote>
        <p>Consider the following lists:</p>
        <program language="python">
          <code>
list1=[1,100,1000] list2=[1,100,1000] list3=list1
          </code>
        </program>
        <p>Which statements will output <term>True</term>? (Select <term>all</term> that apply).</p>
      </blockquote>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>print(list1 == list2)</p>
        </statement>
        <feedback><p>
                    list1 and list2 have the same value
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>print(list1 is list2)</p>
        </statement>
        <feedback><p>
                    list1 and list2 have the same value but do not refer to the same object
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>print(list1 is list3)</p>
        </statement>
        <feedback><p>
                    list3 is assigned to list1, so they refer to the same object
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>print(list2 is not list3)</p>
        </statement>
        <feedback><p>
                    list2 and list3 do not refer to the same object.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>print(list2 != list3)</p>
        </statement>
        <feedback><p>
                    list2 and list3 have the same value
        </p></feedback>
      </choice>
    </choices>
  </exercise>
</section>
