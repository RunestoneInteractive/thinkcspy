<?xml version="1.0"?>
<section xml:id="lists_append-versus-concatenate">
  <title>Append versus Concatenate</title>
  <p>The <c>append</c> method adds a new item to the end of a list.  It is also possible to add a new item to the end of a list by using the concatenation operator.  However, you need to be careful.</p>
  <p>Consider the following example.  The original list has 3 integers.  We want to add the word <q>cat</q> to the end of the list.</p>
  <program xml:id="appcon1" interactive="codelens" language="python">
    <code>
origlist = [45, 32, 88]

origlist.append("cat")
    </code>
  </program>
  <p>Here we have used <c>append</c> which simply modifies the list.  In order to use concatenation, we need to write an assignment statement that uses the accumulator pattern:</p>
  <pre>origlist = origlist + ["cat"]</pre>
  <p>Note that the word <q>cat</q> needs to be placed in a list since the concatenation operator needs two lists to do its work.</p>
  <program xml:id="appcon2" interactive="codelens" language="python">
    <code>
origlist = [45, 32, 88]

origlist = origlist + ["cat"]
    </code>
  </program>
  <p>It is also important to realize that with append, the original list is simply modified.
            On the other hand, with concatenation, an entirely new list is created.  This can be seen in the following codelens example where
    <c>newlist</c> refers to a list which is a copy of the original list, <c>origlist</c>, with the new item <q>cat</q> added to the end.  <c>origlist</c> still contains the three values it did before the concatenation.  This is why the assignment operation is necessary as part of the
            accumulator pattern.</p>
  <program xml:id="appcon3" interactive="codelens" language="python">
    <code>
          origlist = [45, 32, 88]

          newlist = origlist + ["cat"]
    </code>
  </program>
  <p>
    <term>Check you understanding</term>
  </p>
  <exercise label="test_question9_15_1">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <code>
alist = [4, 2, 8, 6, 5]
alist = alist + 999
print(alist)
        </code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[4, 2, 8, 6, 5, 999]</p>
        </statement>
        <feedback><p>
                    You cannot concatenate a list with an integer.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Error, you cannot concatenate a list with an integer.</p>
        </statement>
        <feedback><p>
                    Yes, in order to perform concatenation you would need to write alist+[999].  You must have two lists.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
</section>
