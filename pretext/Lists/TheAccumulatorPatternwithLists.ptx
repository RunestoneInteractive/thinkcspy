<?xml version="1.0"?>
<section xml:id="lists_the-accumulator-pattern-with-lists">
	<title>The Accumulator Pattern with Lists</title>
	<subsection xml:id="subsec-Introduction">
		<title>Introduction</title>
		<p>
			Remember the <xref ref="functions_the-accumulator-pattern" />? Many algorithms involving
			lists make use of this pattern to process the items in a list and compute a result.
			In this
			section, we'll explore the use of the accumulator pattern with lists.
		</p>

		<p>
			Let's take the problem of adding up all of the items in a list.
			The following program
			computes the sum of a list of numbers.
		</p>


		<program xml:id="ac7_10_0" interactive="activecode" language="python">
			<input>
        sum = 0
        for num in [1, 3, 5, 7, 9]:
            sum = sum + num
        print(sum)
			</input>
		</program>

		<p>
			The program begins by defining an accumulator variable, <c>sum</c>, and initializing it to 0
			(line 1).
		</p>

		<p>
			Next, the program iterates over the list (lines 2-3), and updates the sum on each iteration
			by adding an item from the list (line 3).
			When the loop is finished, <c>sum</c> has
			accumulated the sum of all of the items in the list.
		</p>

		<p>
			Take a moment to step through this program using CodeLens to see how it works.
			It's important
			to
			grasp the basic techniques.
		</p>

		<p>
			Sometimes when we're accumulating, we don't want to add to our accumulator every time we
			iterate.
			Consider, for example, the following program which counts the number of names with more than 3
			letters.
		</p>


		<program xml:id="ac7_10_1" interactive="activecode" language="python">
			<input>
        long_names = 0
        for name in ["Joe", "Sally", "Amy", "Brad"]:
            if len(name) &gt; 3:
                long_names += 1
        print(long_names)
			</input>
		</program>

		<p>
			Here, we <term>initialize</term> the accumulator variable to be zero on line 1.
		</p>

		<p>
			We <term>iterate</term> through the sequence (line 2).
		</p>

		<p>
			The <term>update</term> step happens in two parts.
			First, we check to see if the name is
			longer than 3 letters.
			If so, then we increment the accumulator variable <c>long_names</c> (on
			line 4) by adding one to it.
		</p>

		<p>
			At the end, we have accumulated the total number of long names.
		</p>

		<p>
			We can use conditionals to also count if particular items are in a string or list.
			The
			following code finds all occurrences of vowels in a string.
		</p>


		<program xml:id="ac7_10_2" interactive="activecode" language="python">
			<input>
        s = "what if we went to the zoo"
        num_vowels = 0
        for i in s:
            if i in ['a', 'e', 'i', 'o', 'u']:
                num_vowels += 1
        print(num_vowels)
			</input>
		</program>

		<p>
			We can also use <c>==</c> to execute a similar operation.
			Here, we'll check to see if the
			character we are iterating over is an <q>o</q>.
			If it is an <q>o</q> then we will update our
			counter.
		</p>
		<image
		component="html"
		source="Lists/Figures/accum_o.gif"
		width="50%"
		alt="a gif that shows code to check that &quot;o&quot; is in the phrase &quot;onomatopoeia&quot;."
		/>
	</subsection>

	<subsection xml:id="lists_accumulating-the-max-value">
		<title>Accumulating the Max Value</title>
		<p>
			We can also use the accumulation pattern with conditionals to find the maximum or minimum
			value.
			Instead of
			continuing to build up the accumulator value like we have when counting or finding a sum, we
			can reassign the
			accumulator variable to a different value.
		</p>

		<p>
			The following example shows how we can get the maximum value from a list of integers.
		</p>


		<program xml:id="ac7_10_3" interactive="activecode" language="python">
			<input>
        nums = [9, 3, 8, 11, 5, 29, 2]
        best_num = 0
        for n in nums:
            if n &gt; best_num:
                best_num = n
        print(best_num)
			</input>
		</program>

		<p>
			Here, we initialize best_num to zero, assuming that there are no negative numbers in the
			list.
		</p>

		<p>
			In the for loop, we check to see if the current value of n is greater than the current value
			of <c>best_num</c>.
			If it is, then we want to <term>update</term> <c>best_num</c> so that it
			now is assigned the higher number.
			Otherwise, we do nothing and continue the for loop.
		</p>

		<p>
			You may notice that the current structure could be a problem.
			If the numbers were all
			negative what would happen to our code? What if we were looking for the smallest number but we
			initialized <c>best_num</c> with zero? To get around this issue, we can initialize the
			accumulator variable using one of the numbers in the list.
		</p>


		<program xml:id="ac7_10_4" interactive="activecode" language="python">
			<input>
        nums = [9, 3, 8, 11, 5, 29, 2]
        best_num = nums[0]
        for n in nums:
            if n &gt; best_num:
                best_num = n
        print(best_num)
			</input>
		</program>

		<p>
			The only thing we changed was the value of <c>best_num</c> on line 2 so that the value of <c>
			best_num</c> is the first element in <c>nums</c>, but the result is still the same!
		</p>
	</subsection>

	<subsection xml:id="lists_accumulating-a-string-result">
		<title>Accumulating a String Result</title>
		<p>
			The accumulator pattern can be used to convert a list of items to a string.
		</p>

		<p>
			Consider the following program:
		</p>


		<program xml:id="ac7_10_5" interactive="activecode" language="python">
			<input>
        scores = [85, 95, 70]
        result = ''
        for score in scores:
            result = result + str(score) + ','
        print("The scores are " + result)
			</input>
		</program>

		<p>
			Here, the accumulator variable is <c>result</c>.
			Each time through the loop, the program
			concatenates the current contents of <c>result</c> with the comma separator and a score from
			the list, and updates the <c>result</c> with the new value.
			Use CodeLens to step through this
			example to see it in action.
		</p>

		<p>
			The output of the program has some undesirable formatting problems: there is a trailing comma
			instead
			of a period, and there are no spaces between the items.
			The next activity lets you work to
			correct those problems.
		</p>

		<exercise label="ac7_10_5a">
			<statement>
				<p>
					Let's work to improve the formatting of the sentence produced by the program above.
					Revise the following code so that it outputs the sentence:
				</p>

				<pre>The scores are 85, 95, and 70.</pre>
			</statement>


			<program interactive="activecode" language="python" xml:id="ac7_10_5a_editor">
				<input>
          scores = [85, 95, 70]
          result = ''
          for score in scores:
              result = result + str(score) + ','
          print("The scores are " + result)
          =====
          from unittest.gui import TestCaseGui
          class myTests(TestCaseGui):
              def testOne(self):
                  self.assertEqual(self.getOutput().rstrip('\n'), 'The scores are 85, 95, and 70.', "Output should be 'The scores are 85, 95, and 70.'")
          myTests().main()
				</input>
			</program>

			<hint>
				<p>
					Try changing the loop so that it does not process the final score.
					Handle that last
					score separately, after the loop finishes.
				</p>
			</hint>

			<solution>
				This solution works by iterating over all of the scores in the list except the
				last, and dealing with that one separately.
				<program xml:id="ac7_10_5a_solution"
					language="python">
					<input>
            scores = [85, 95, 70]
            result = ''
            for score in scores[:-1]:
                result = result + str(score) + ', '
            # Now, append the last score
            result = result + 'and ' + str(scores[-1]) + '.'
            print("The scores are " + result)
					</input>
				</program>

				<p>
					This
					solution works by iterating over all of the scores in the list
					except the last, and dealing with that one separately.
				</p>
			</solution>
		</exercise>

		<p>
			<term>Check your understanding</term>
		</p>

		<exercise label="question7_10_1">
			<statement>
				<p>
					What is printed by the following statements?
				</p>


				<program language="python">
					<input>
            s = "We are learning!"
            x = 0
            for i in s:
                if i in ['a', 'b', 'c', 'd', 'e']:
                    x += 1
            print(x)
					</input>
				</program>
			</statement>
			<choices>
			<choice>
			<statement>
				<p>
					2
				</p>
			</statement>

			<feedback>
				<p>
					Though only two of the letters in the list are found, we count them each time they
					appear.
				</p>
			</feedback>
			</choice>
			<choice correct="yes">
			<statement>
				<p>
					5
				</p>
			</statement>

			<feedback>
				<p>
					Yes, we add to x each time we come across a letter in the list.
				</p>
			</feedback>
			</choice>
			<choice>
			<statement>
				<p>
					0
				</p>
			</statement>

			<feedback>
				<p>
					Check again what the conditional is evaluating.
					The value of i will be a character in
					the string s, so what will happen in the if statement?
				</p>
			</feedback>
			</choice>
			<choice>
			<statement>
				<p>
					There is an error in the code so it cannot run.
				</p>
			</statement>

			<feedback>
				<p>
					There are no errors in this code.
				</p>
			</feedback>
			</choice>
			</choices>
		</exercise>

		<exercise label="question7_10_2">
			<statement>
				<p>
					What is printed by the following statements?
				</p>


				<program language="python">
					<input>
            list= [5, 2, 1, 4, 9, 10]
            min_value = 0
            for item in list:
                if item &lt; min_value:
                    min_value = item
            print(min_value)
					</input>
				</program>
			</statement>
			<choices>
			<choice>
			<statement>
				<p>
					10
				</p>
			</statement>

			<feedback>
				<p>
					Not quite.
					What is the conditional checking?
				</p>
			</feedback>
			</choice>
			<choice>
			<statement>
				<p>
					1
				</p>
			</statement>

			<feedback>
				<p>
					min_value was set to a number that was smaller than any of the numbers in the list, so
					it was never updated in the for loop.
				</p>
			</feedback>
			</choice>
			<choice correct="yes">
			<statement>
				<p>
					0
				</p>
			</statement>

			<feedback>
				<p>
					Yes, min_value was set to a number that was smaller than any of the numbers in the
					list, so it was never updated in the for loop.
				</p>
			</feedback>
			</choice>
			<choice>
			<statement>
				<p>
					There is an error in the code so it cannot run.
				</p>
			</statement>

			<feedback>
				<p>
					The code does not have an error that would prevent it from running.
				</p>
			</feedback>
			</choice>
			</choices>
		</exercise>

		<exercise label="ac7_10_7">
			<statement>
				<p>
					<term>Challenge</term> For each word in <c>words</c>, add &#x2018;d' to the end of the
					word if the word ends in <q>e</q> to make it past tense.
					Otherwise, add &#x2018;ed' to
					make it past tense.
					Save these past tense words to a list called <c>past_tense</c>.
				</p>
			</statement>


			<program xml:id="ac7_10_7_editor" interactive="activecode" language="python">
				<input>
          words = ["adopt", "bake", "beam", "confide", "grill", "plant", "time", "wave", "wish"]
          =====
          from unittest.gui import TestCaseGui
          class myTests(TestCaseGui):
              def testNine(self):
                  self.assertEqual(past_tense, ['adopted', 'baked', 'beamed', 'confided', 'grilled', 'planted', 'timed', 'waved', 'wished'], "Testing that the past_tense list is correct.")
                  self.assertIn("else", self.getEditorText(), "Testing output (Don't worry about actual and expected values).")
                  self.assertIn("for", self.getEditorText(), "Testing output (Don't worry about actual and expected values).")
          myTests().main()
				</input>
			</program>
		</exercise>
	</subsection>
</section>
