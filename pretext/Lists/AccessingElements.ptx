<?xml version="1.0"?>
<section xml:id="lists_accessing-elements">
  <title>Accessing Elements</title>
  <p>The syntax for accessing the elements of a list is the same as the syntax for
            accessing the characters of a string.  We use the index operator ( <c>[]</c> &#x2013; not to
            be confused with an empty list). The expression inside the brackets specifies
            the index. Remember that the indices start at 0.  Any integer expression can be used
            as an index and as with strings, negative index values will locate items from the right instead
            of from the left.</p>
  <program xml:id="chp09_02" interactive="activecode" language="python">
    <code>
numbers = [17, 123, 87, 34, 66, 8398, 44]
print(numbers[2])
print(numbers[9 - 8])
print(numbers[-2])
print(numbers[len(numbers) - 1])
        </code>
  </program>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="test_question9_3_1">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <code>
alist = [3, 67, "cat", [56, 57, "dog"], [ ], 3.14, False]
print(alist[5])
</code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[ ]</p>
        </statement>
        <feedback><p>
                    The empty list is at index 4.
                </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>3.14</p>
        </statement>
        <feedback><p>
                    Yes, 3.14 is at index 5 since we start counting at 0 and sublists count as one item.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>False</p>
        </statement>
        <feedback><p>
                    False is at index 6.
                </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="test_question9_3_2">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <code>
alist = [3, 67, "cat", [56, 57, "dog"], [ ], 3.14, False]
print(alist[2].upper())
</code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Error, you cannot use the upper method on a list.</p>
        </statement>
        <feedback><p>
                    alist[2] is the string cat so the upper method is legal
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>2</p>
        </statement>
        <feedback><p>
                    2 is the index.  We want the item at that index.
                </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>CAT</p>
        </statement>
        <feedback><p>
                    Yes, the string cat is upper cased to become CAT.
                </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="test_question9_3_3">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <code>
alist = [3, 67, "cat", [56, 57, "dog"], [ ], 3.14, False]
print(alist[2][0])
</code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>56</p>
        </statement>
        <feedback><p>
                    Indexes start with 0, not 1.
                </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>c</p>
        </statement>
        <feedback><p>
                    Yes, the first character of the string at index 2 is c
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>cat</p>
        </statement>
        <feedback><p>
                    cat is the item at index 2 but then we index into it further.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>Error, you cannot have two index values unless you are using slicing.</p>
        </statement>
        <feedback><p>
                    Using more than one index is fine.  You read it from left to right.
                </p></feedback>
      </choice>
    </choices>
  </exercise>
</section>
