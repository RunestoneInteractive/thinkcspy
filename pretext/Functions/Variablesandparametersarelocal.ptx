<?xml version="1.0"?>
<section xml:id="functions_variables-and-parameters-are-local">
  <title>Variables and Parameters are Local</title>
  <p>An assignment statement in a function creates a <term>local variable</term> for the
            variable on the left hand side of the assignment operator. It is called local because this variable only
            exists inside the function and you cannot use it outside. For example,
            consider again the <c>square</c> function:</p>
  <program xml:id="bad_local" interactive="codelens" language="python">
    <code>
          def square(x):
              y = x * x
              return y

          z = square(10)
          print(y)
    </code>
  </program>
  <p>If you press the &#x2018;last &gt;&gt;' button you will see an error message.
            When we try to use <c>y</c> on line 6 (outside the function) Python looks for a global
            variable named <c>y</c> but does not find one.  This results in the
            error: <c>Name Error: 'y' is not defined.</c>
  </p>
  <p>The variable <c>y</c> only exists while the function is being executed &#x2014;
            we call this its <term>lifetime</term>.
            When the execution of the function terminates (returns),
            the local variables  are destroyed.  Codelens helps you  visualize this
            because the local variables disappear after the function returns.  Go back and step through the
            statements paying particular attention to the variables that are created when the function is called.
            Note when they are subsequently destroyed as the function returns.</p>
  <p>Formal parameters are also local and act like local variables.
            For example, the lifetime of <c>x</c> begins when <c>square</c> is
            called,
            and its lifetime ends when the function completes its execution.</p>
  <p>So it is not possible for a function to set some local variable to a
            value, complete its execution, and then when it is called again next
            time, recover the local variable.  Each call of the function creates
            new local variables, and their lifetimes expire when the function returns
            to the caller.</p>
  <p>On the other hand, it is legal for a function to access a global variable.  However, this is considered
    <term>bad form</term> by nearly all programmers and should be avoided.  Look at the following,
            nonsensical variation of the square function.</p>
  <program xml:id="badsquare_1" interactive="activecode" language="python">
    <code>
def badsquare(x):
    y = x ** power
    return y

power = 2
result = badsquare(10)
print(result)
    </code>
  </program>
  <p xml:id="functions-index-1">Although the <c>badsquare</c> function works, it is silly and poorly written.  We have done it here to illustrate
            an important rule about how variables are looked up in Python.
            First, Python looks at the variables that are defined as local variables in
            the function.  We call this the <term>local scope</term>.  If the variable name is not
            found in the local scope, then Python looks at the global variables,
            or <term>global scope</term>.  This is exactly the case illustrated in the code above.
    <c>power</c> is not found locally in <c>badsquare</c> but it does exist globally.
            The appropriate way to write this function would be to pass power as a parameter.
            For practice, you should rewrite the badsquare example to have a second parameter called power.</p>
  <p>There is another variation on this theme of local versus global variables.  Assignment statements in the local function cannot
            change variables defined outside the function, without further (discouraged) special syntax.  Consider the following
            codelens example:</p>
  <program xml:id="cl_powerof_bad" interactive="codelens" language="python">
    <code>
          def powerof(x, p):
              power = p   # Another dumb mistake
              y = x ** power
              return y

          power = 3
          result = powerof(10, 2)
          print(result)
    </code>
  </program>
  <p>Now step through the code.  What do you notice about the values of variable <c>power</c>
            in the local scope compared to the variable <c>power</c> in the global scope?</p>
  <p xml:id="functions_index-2">The value of <c>power</c> in the local scope was different than the global scope.
            That is because in this example <c>power</c> was used on the left hand side of the
            assignment statement <c>power = p</c>.  When a variable name is used on the
            left hand side of an assignment statement Python creates a local variable.
            When a local variable has the same name as a global variable we say that the
            local shadows the global.  A <term>shadow</term> means that the global variable cannot
            be accessed by Python because the local variable will be found first. This is
            another good reason not to use global variables. As you can see,
            it makes your code confusing and difficult to
            understand.</p>
  <p>To cement all of these ideas even further lets look at one final example.
            Inside the <c>square</c> function we are going to make an assignment to the
            parameter <c>x</c>  There's no good reason to do this other than to emphasize
            the fact that the parameter <c>x</c> is a local variable.  If you step through
            the example in codelens you will see that although <c>x</c> is 0 in the local
            variables for <c>square</c>, the <c>x</c> in the global scope remains 2.  This is confusing
            to many beginning programmers who think that an assignment to a
            formal parameter will cause a change to the value of the variable that was
            used as the actual parameter, especially when the two share the same name.
            But this example demonstrates that that is clearly not how Python operates.</p>
  <program xml:id="cl_change_parm" interactive="codelens" language="python">
    <code>
          def square(x):
              y = x * x
              x = 0       # assign a new value to the parameter x
              return y

          x = 2
          z = square(x)
          print(z)
    </code>
  </program>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="test_question5_3_1">
    <statement>
      <p>What is a variable's scope?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Its value</p>
        </statement>
        <feedback><p>
                    Value is the contents of the variable.  Scope concerns where the variable is "known".
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>The range of statements in the code where a variable can be accessed.</p>
        </statement>
        <feedback><p>
                    The range in which a variable can be accessed is it's scope. For example if a variable is defined in a function, then the scope of the variable is that function.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>Its name</p>
        </statement>
        <feedback><p>
                    The name of a variable is just an identifier or alias.  Scope concerns where the variable is "known".
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="test_question5_3_2">
    <statement>
      <p>What is a local variable?</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>A temporary variable that is only used inside a function</p>
        </statement>
        <feedback><p>
                    Yes, a local variable is a temporary variable that is only known (only exists) in the function it is defined in.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>The same as a parameter</p>
        </statement>
        <feedback><p>
                    While parameters may be considered local variables, functions may also define and use additional local variables.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>Another name for any variable</p>
        </statement>
        <feedback><p>
                    Variables that are used outside a function are not local, but rather global variables.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="test_question5_3_3">
    <statement>
      <p>Can you use the same name for a local variable as a global variable?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Yes, and there is no reason not to.</p>
        </statement>
        <feedback><p>
                    While there is no problem as far as Python is concerned, it is generally considered bad style because of the potential for the programmer to get confused.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Yes, but it is considered bad form.</p>
        </statement>
        <feedback><p>
                    it is generally considered bad style because of the potential for the programmer to get confused.  If you must use global variables (also generally bad form) make sure they have unique names.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>No, it will cause an error.</p>
        </statement>
        <feedback><p>
                    Python manages global and local scope separately and has clear rules for how to handle variables with the same name in different scopes, so this will not cause a Python error.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
</section>
