<?xml version="1.0"?>
<section xml:id="functions_the-accumulator-pattern">
  <title>The Accumulator Pattern</title>
  <subsection><title>Introduction</title>
  <video xml:id="function_accumulator_pattern" youtube="aqhREpceEMI" width="auto"/>
  <p>In the previous example, we wrote a function that computes the square of a number.  The algorithm we used
            in the function was simple: multiply the number by itself.
            In this section we will reimplement the square function and use a different algorithm, one that relies on addition instead
            of multiplication.</p>
  <p>If you want to multiply two numbers together, the most basic approach is to think of it as repeating the process of
            adding one number to itself.  The number of repetitions is where the second number comes into play.  For example, if we
            wanted to multiply three and five, we could think about it as adding three to itself five times.  Three plus three is six, plus three is nine, plus three is 12, and finally plus three is 15.  Generalizing this, if we want to implement
            the idea of squaring a number, call it n, we would add n to itself n times.</p>
  <p>Do this by hand first and try to isolate exactly what steps you take.  You'll
            find you need to keep some <q>running total</q> of the sum so far, either on a piece
            of paper, or in your head.  Remembering things from one step to the next is
            precisely why we have variables in a program.  This means that we will need some variable
            to remember the <q>running total</q>.  It should be initialized with a value of zero.  Then, we need to <term>update</term> the <q>running total</q> the correct number of times.  For each repetition, we'll want
            to update the running total by adding the number to it.</p>
  <p>In words we could say it this way.  To square the value of n, we will repeat the process of updating a running total n times.  To update the running total, we take the old value of the <q>running total</q> and add n.  That sum becomes the new
            value of the <q>running total</q>.
  </p>
  <p>Here is the program in activecode.  Note that the heading of the function definition is the same as it was before.  All that has changed
            is the details of how the squaring is done.  This is a great example of <q>black box</q> design.  We can change out the details inside of the box and still use the function exactly as we did before.</p>
  <program xml:id="sq_accum1" interactive="activecode" language="python">
    <input>
def square(x):
    runningtotal = 0
    for counter in range(x):
        runningtotal = runningtotal + x

    return runningtotal

toSquare = 10
squareResult = square(toSquare)
print("The result of", toSquare, "squared is", squareResult)
    </input>
  </program>
  <p>In the program above, notice that the variable <c>runningtotal</c> starts out with a value of 0.  Next, the iteration is performed <c>x</c> times.  Inside the for loop, the update occurs. <c>runningtotal</c> is reassigned a new value which is the old value plus the value of <c>x</c>.
  </p>
  <p>This pattern of iterating the updating of a variable is commonly
            referred to as the <term>accumulator pattern</term>.  We refer to the variable as the <term>accumulator</term>.  This pattern will come up over and over again.  Remember that the key
            to making it work successfully is to be sure to initialize the variable before you start the iteration.
            Once inside the iteration, it is required that you update the accumulator.</p>
  <note>
    <p>What would happen if we put the assignment <c>runningTotal = 0</c> inside
                the for statement?  Not sure? Try it and find out.</p>
  </note>
  <p>Here is the same program in codelens.  Step through the function and watch the <q>running total</q> accumulate the result.</p>
  <program xml:id="sq_accum3" interactive="codelens" language="python">
    <input>
def square(x):
    runningtotal = 0
    for counter in range(x):
        runningtotal = runningtotal + x

    return runningtotal

toSquare = 10
squareResult = square(toSquare)
print("The result of", toSquare, "squared is", squareResult)
    </input>
  </program>
</subsection>
  <subsection xml:id="functions_the-general-accumulator-pattern">
    <title>The General Accumulator Pattern</title>
    <program language="python">
      <input>
initialize the accumulator variable
repeat:
    modify the accumulator variable

# when the loop terminates the accumulator has the correct value
      </input>
    </program>
    <note>
      <p>This workspace is provided for your convenience.  You can use this activecode window to try out anything you like.</p>
      <program xml:id="scratch_05_04" interactive="activecode" language="python">
        <input>


        </input>
      </program>
    </note>
    <p>
      <term>Check your understanding</term>
    </p>
    <exercise label="test_question5_4_1">
      <statement>
        <p>Consider the following code:</p>
        <program language="python">
          <input>
def square(x):
    for counter in range(x):
        runningtotal = 0
        runningtotal = runningtotal + x
    return runningtotal
          </input>
        </program>
        <p>What happens if you put the initialization of runningtotal (the
                line runningtotal = 0) inside the for loop as the first
                instruction in the loop?</p>
      </statement>
      <choices>
        <choice correct="yes">
          <statement>
            <p>The square function will return x instead of x * x</p>
          </statement>
          <feedback><p>
                    The variable runningtotal will be reset to 0 each time through the loop.   However because this assignment happens as the first instruction, the next instruction in the loop will set it back to x.   When the loop finishes, it will have the value x, which is what is returned.
          </p></feedback>
        </choice>
        <choice>
          <statement>
            <p>The square function will cause an error</p>
          </statement>
          <feedback><p>
                    Assignment statements are perfectly legal inside loops and will not cause an error.
          </p></feedback>
        </choice>
        <choice>
          <statement>
            <p>The square function will work as expected and return x * x</p>
          </statement>
          <feedback><p>
                    By putting the statement that sets runningtotal to 0 inside the loop, that statement gets executed every time through the loop, instead of once before the loop begins.  The result is that runningtotal is 'cleared' (reset to 0) each time through the loop.
          </p></feedback>
        </choice>
        <choice>
          <statement>
            <p>The square function will return 0 instead of x * x</p>
          </statement>
          <feedback><p>
                    The line runningtotal = 0 is the first line in the for loop, but immediately after this line, the line runningtotal = runningtotal + x will execute, giving runningtotal a non-zero value  (assuming x is non-zero).
          </p></feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="question5_4_1p" indent="show" language="python">
      <statement>
        <p>Rearrange the code statements so that the program will add up the first n odd numbers where n is provided by the user.</p>
      </statement>
      <blocks>
        <block order="4">
          <cline>n = int(input('How many odd numbers would</cline>
          <cline>you like to add together?'))</cline>
          <cline>thesum = 0</cline>
          <cline>oddnumber = 1</cline>
        </block>
        <block order="2">
          <cline>for counter in range(n):</cline>
        </block>
        <block order="1">
          <cline>   thesum = thesum + oddnumber</cline>
          <cline>   oddnumber = oddnumber + 2</cline>
        </block>
        <block order="3">
          <cline>print(thesum)</cline>
        </block>
      </blocks>
    </exercise>
  </subsection>
  <subsection xml:id="functions_a-variation-on-the-accumulator-pattern">
    <title>A Variation on the Accumulator Pattern</title>
    <program xml:id="ch04_accum3" interactive="activecode" language="python">
      <input>
def square(x):
    '''raise x to the second power'''
    runningtotal = 0
    for counter in range(x):
        runningtotal = runningtotal + x

    return runningtotal

toSquare = 10
squareResult = square(toSquare)
print("The result of", toSquare, "squared is", squareResult)
      </input>
    </program>
    <note>
      <title>Modify the program &#x2026;</title>
      <p>Change the value of <c>toSquare</c> in line 9 to <c>-10</c> and run.</p>
      <p>We now see that our function has a semantic error. Remember when we first introduced the square function, unit testing and equivalence classes?</p>
      <p>Change the value of <c>toSquare</c> in line 9 back to <c>10</c> and run.</p>
      <p>What would happen if we change <c>runningtotal = runningtotal + x</c> to use <term>multiplication</term> instead of addition?  Make this change to the program and look at the output.</p>
      <p>It is very important to properly initialize the accumulator variable. Do a web search on <c>additive identity</c> and <c>multiplicative identity</c>.        <term>Properly initialize the accumulator variable</term> and run the program.</p>
      <p>Now we get an answer other than 0. However, the answer is not the square of of <c>x</c>. It is also important that the loop repeat the proper number of times. How many times do we need to execute line 5 to get the square of <c>x</c>?        <term>Change line 4 to repeat the correct number of times</term>. Now the program should produce the correct result.</p>
      <p>Change the value of <c>toSquare</c> in line 9 to <c>-10</c> and run. Now negative inputs also work!</p>
      <p>Remember that the boundary between our equivalence classes is 0. Try that value for <c>toSquare</c> also.</p>
    </note>
  </subsection>
</section>
