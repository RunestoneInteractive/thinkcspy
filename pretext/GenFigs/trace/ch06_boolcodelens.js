if (allTraceData === undefined) {
 var allTraceData = {};
 }
 allTraceData["rs-ch06_boolcodelens"] = {"code": "def isDivisible(x, y):\n    return x % y == 0\n\nif isDivisible(10, 5):\n    print(\"That works\")\nelse:\n    print(\"Those values are no good\")\n\n", "trace": [{"line": 1, "event": "step_line", "func_name": "<module>", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "<module>", "globals": {"isDivisible": ["REF", 1]}, "ordered_globals": ["isDivisible"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "isDivisible(x, y)", null]}, "stdout": ""}, {"line": 1, "event": "call", "func_name": "isDivisible", "globals": {"isDivisible": ["REF", 1]}, "ordered_globals": ["isDivisible"], "stack_to_render": [{"func_name": "isDivisible", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "y": 5}, "ordered_varnames": ["x", "y"], "is_zombie": false, "is_highlighted": true, "unique_hash": "isDivisible_f1"}], "heap": {"1": ["FUNCTION", "isDivisible(x, y)", null]}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "isDivisible", "globals": {"isDivisible": ["REF", 1]}, "ordered_globals": ["isDivisible"], "stack_to_render": [{"func_name": "isDivisible", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "y": 5}, "ordered_varnames": ["x", "y"], "is_zombie": false, "is_highlighted": true, "unique_hash": "isDivisible_f1"}], "heap": {"1": ["FUNCTION", "isDivisible(x, y)", null]}, "stdout": ""}, {"line": 2, "event": "return", "func_name": "isDivisible", "globals": {"isDivisible": ["REF", 1]}, "ordered_globals": ["isDivisible"], "stack_to_render": [{"func_name": "isDivisible", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "y": 5, "__return__": true}, "ordered_varnames": ["x", "y", "__return__"], "is_zombie": false, "is_highlighted": true, "unique_hash": "isDivisible_f1"}], "heap": {"1": ["FUNCTION", "isDivisible(x, y)", null]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "<module>", "globals": {"isDivisible": ["REF", 1]}, "ordered_globals": ["isDivisible"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "isDivisible(x, y)", null]}, "stdout": ""}, {"line": 5, "event": "return", "func_name": "<module>", "globals": {"isDivisible": ["REF", 1]}, "ordered_globals": ["isDivisible"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "isDivisible(x, y)", null]}, "stdout": "That works\n"}]}