if (allTraceData === undefined) {
 var allTraceData = {};
 }
 allTraceData["rs-ch08_7"] = {"code": "fruit = \"apple\"\nfor idx in range(5):\n    currentChar = fruit[idx]\n    print(currentChar)\n\n", "trace": [{"line": 1, "event": "step_line", "func_name": "<module>", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "<module>", "globals": {"fruit": "apple"}, "ordered_globals": ["fruit"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "<module>", "globals": {"fruit": "apple", "idx": 0}, "ordered_globals": ["fruit", "idx"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "<module>", "globals": {"fruit": "apple", "idx": 0, "currentChar": "a"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "<module>", "globals": {"fruit": "apple", "idx": 0, "currentChar": "a"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\n"}, {"line": 3, "event": "step_line", "func_name": "<module>", "globals": {"fruit": "apple", "idx": 1, "currentChar": "a"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\n"}, {"line": 4, "event": "step_line", "func_name": "<module>", "globals": {"fruit": "apple", "idx": 1, "currentChar": "p"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\n"}, {"line": 2, "event": "step_line", "func_name": "<module>", "globals": {"fruit": "apple", "idx": 1, "currentChar": "p"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\n"}, {"line": 3, "event": "step_line", "func_name": "<module>", "globals": {"fruit": "apple", "idx": 2, "currentChar": "p"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\n"}, {"line": 4, "event": "step_line", "func_name": "<module>", "globals": {"fruit": "apple", "idx": 2, "currentChar": "p"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\n"}, {"line": 2, "event": "step_line", "func_name": "<module>", "globals": {"fruit": "apple", "idx": 2, "currentChar": "p"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\n"}, {"line": 3, "event": "step_line", "func_name": "<module>", "globals": {"fruit": "apple", "idx": 3, "currentChar": "p"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\n"}, {"line": 4, "event": "step_line", "func_name": "<module>", "globals": {"fruit": "apple", "idx": 3, "currentChar": "l"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\n"}, {"line": 2, "event": "step_line", "func_name": "<module>", "globals": {"fruit": "apple", "idx": 3, "currentChar": "l"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\nl\n"}, {"line": 3, "event": "step_line", "func_name": "<module>", "globals": {"fruit": "apple", "idx": 4, "currentChar": "l"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\nl\n"}, {"line": 4, "event": "step_line", "func_name": "<module>", "globals": {"fruit": "apple", "idx": 4, "currentChar": "e"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\nl\n"}, {"line": 2, "event": "step_line", "func_name": "<module>", "globals": {"fruit": "apple", "idx": 4, "currentChar": "e"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\nl\ne\n"}, {"line": 2, "event": "return", "func_name": "<module>", "globals": {"fruit": "apple", "idx": 4, "currentChar": "e"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\nl\ne\n"}]}